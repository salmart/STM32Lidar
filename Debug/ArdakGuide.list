
ArdakGuide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000653c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08006734  08006734  00016734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006854  08006854  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08006854  08006854  00016854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800685c  0800685c  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006860  08006860  00016860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08006870  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08006910  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000870  2000014c  080069b0  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200009bc  080069b0  000209bc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018c1f  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002bd7  00000000  00000000  00038d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001360  00000000  00000000  0003b970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001258  00000000  00000000  0003ccd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029738  00000000  00000000  0003df28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000166e7  00000000  00000000  00067660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00103a98  00000000  00000000  0007dd47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001817df  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005348  00000000  00000000  00181830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800671c 	.word	0x0800671c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	0800671c 	.word	0x0800671c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <CalCRC8>:
 0xb7, 0x5d, 0x10, 0xc7, 0x8a, 0x24, 0x69, 0xbe, 0xf3, 0xaf, 0xe2, 0x35,
 0x78, 0xd6, 0x9b, 0x4c, 0x01, 0xf4, 0xb9, 0x6e, 0x23, 0x8d, 0xc0, 0x17,
 0x5a, 0x06, 0x4b, 0x9c, 0xd1, 0x7f, 0x32, 0xe5, 0xa8
};
uint8_t CalCRC8(uint8_t *p, uint8_t len)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	70fb      	strb	r3, [r7, #3]
 uint8_t crc = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	73fb      	strb	r3, [r7, #15]
 uint16_t i;
 for (i = 0; i < len; i++)
 800054c:	2300      	movs	r3, #0
 800054e:	81bb      	strh	r3, [r7, #12]
 8000550:	e00d      	b.n	800056e <CalCRC8+0x32>
 {
 crc = CrcTable[(crc ^ *p++) & 0xff];
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	1c5a      	adds	r2, r3, #1
 8000556:	607a      	str	r2, [r7, #4]
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	4053      	eors	r3, r2
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <CalCRC8+0x4c>)
 8000564:	5c9b      	ldrb	r3, [r3, r2]
 8000566:	73fb      	strb	r3, [r7, #15]
 for (i = 0; i < len; i++)
 8000568:	89bb      	ldrh	r3, [r7, #12]
 800056a:	3301      	adds	r3, #1
 800056c:	81bb      	strh	r3, [r7, #12]
 800056e:	78fb      	ldrb	r3, [r7, #3]
 8000570:	b29b      	uxth	r3, r3
 8000572:	89ba      	ldrh	r2, [r7, #12]
 8000574:	429a      	cmp	r2, r3
 8000576:	d3ec      	bcc.n	8000552 <CalCRC8+0x16>
 }
 return crc;
 8000578:	7bfb      	ldrb	r3, [r7, #15]
}
 800057a:	4618      	mov	r0, r3
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	08006734 	.word	0x08006734

0800058c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart){
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	//c
	if (!databuffer[0] && lidar_temp_data == 0x54 ){
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <HAL_UART_RxCpltCallback+0x64>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d10e      	bne.n	80005ba <HAL_UART_RxCpltCallback+0x2e>
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <HAL_UART_RxCpltCallback+0x68>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b54      	cmp	r3, #84	; 0x54
 80005a2:	d10a      	bne.n	80005ba <HAL_UART_RxCpltCallback+0x2e>

		databuffer[0]= lidar_temp_data;
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <HAL_UART_RxCpltCallback+0x68>)
 80005a6:	781a      	ldrb	r2, [r3, #0]
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <HAL_UART_RxCpltCallback+0x64>)
 80005aa:	701a      	strb	r2, [r3, #0]
		count++;
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <HAL_UART_RxCpltCallback+0x6c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <HAL_UART_RxCpltCallback+0x6c>)
 80005b6:	701a      	strb	r2, [r3, #0]
	else if (count <=46 && databuffer[0]==0x54){
		//iterating through the data received and assigning it to the array
		databuffer[count]= lidar_temp_data;
		++count;
	}
}
 80005b8:	e014      	b.n	80005e4 <HAL_UART_RxCpltCallback+0x58>
	else if (count <=46 && databuffer[0]==0x54){
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_UART_RxCpltCallback+0x6c>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b2e      	cmp	r3, #46	; 0x2e
 80005c0:	d810      	bhi.n	80005e4 <HAL_UART_RxCpltCallback+0x58>
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_UART_RxCpltCallback+0x64>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b54      	cmp	r3, #84	; 0x54
 80005c8:	d10c      	bne.n	80005e4 <HAL_UART_RxCpltCallback+0x58>
		databuffer[count]= lidar_temp_data;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_UART_RxCpltCallback+0x6c>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <HAL_UART_RxCpltCallback+0x68>)
 80005d2:	7819      	ldrb	r1, [r3, #0]
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_UART_RxCpltCallback+0x64>)
 80005d6:	5499      	strb	r1, [r3, r2]
		++count;
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <HAL_UART_RxCpltCallback+0x6c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <HAL_UART_RxCpltCallback+0x6c>)
 80005e2:	701a      	strb	r2, [r3, #0]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	20000980 	.word	0x20000980
 80005f4:	2000097c 	.word	0x2000097c
 80005f8:	200009af 	.word	0x200009af

080005fc <AssignVal>:



void AssignVal(uint8_t arr[]){
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b0cf      	sub	sp, #316	; 0x13c
 8000600:	af30      	add	r7, sp, #192	; 0xc0
 8000602:	6078      	str	r0, [r7, #4]
	 LiDARFrameTypeDef lf = {0};
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	2265      	movs	r2, #101	; 0x65
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f006 f87d 	bl	800670c <memset>
	 lf.header= arr[0];
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	723b      	strb	r3, [r7, #8]
	 lf.ver_len= arr[1];
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	785b      	ldrb	r3, [r3, #1]
 800061c:	727b      	strb	r3, [r7, #9]
	 lf.speed = ( arr[3]<<8 |arr[2]) /100;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3303      	adds	r3, #3
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	021b      	lsls	r3, r3, #8
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	3202      	adds	r2, #2
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	4313      	orrs	r3, r2
 800062e:	4a80      	ldr	r2, [pc, #512]	; (8000830 <AssignVal+0x234>)
 8000630:	fb82 1203 	smull	r1, r2, r2, r3
 8000634:	1152      	asrs	r2, r2, #5
 8000636:	17db      	asrs	r3, r3, #31
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	ee07 3a90 	vmov	s15, r3
 800063e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000642:	ee17 3a90 	vmov	r3, s15
 8000646:	f8c7 300a 	str.w	r3, [r7, #10]
	 lf.start_angle = (arr[5]<<8|arr[4])/100;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3305      	adds	r3, #5
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	3204      	adds	r2, #4
 8000656:	7812      	ldrb	r2, [r2, #0]
 8000658:	4313      	orrs	r3, r2
 800065a:	4a75      	ldr	r2, [pc, #468]	; (8000830 <AssignVal+0x234>)
 800065c:	fb82 1203 	smull	r1, r2, r2, r3
 8000660:	1152      	asrs	r2, r2, #5
 8000662:	17db      	asrs	r3, r3, #31
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	ee07 3a90 	vmov	s15, r3
 800066a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800066e:	ee17 3a90 	vmov	r3, s15
 8000672:	f8c7 300e 	str.w	r3, [r7, #14]
	 lf.end_angle = (arr[43]<<8 | arr[42])/100;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	332b      	adds	r3, #43	; 0x2b
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	322a      	adds	r2, #42	; 0x2a
 8000682:	7812      	ldrb	r2, [r2, #0]
 8000684:	4313      	orrs	r3, r2
 8000686:	4a6a      	ldr	r2, [pc, #424]	; (8000830 <AssignVal+0x234>)
 8000688:	fb82 1203 	smull	r1, r2, r2, r3
 800068c:	1152      	asrs	r2, r2, #5
 800068e:	17db      	asrs	r3, r3, #31
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	ee07 3a90 	vmov	s15, r3
 8000696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800069a:	ee17 3a90 	vmov	r3, s15
 800069e:	f8c7 3066 	str.w	r3, [r7, #102]	; 0x66
	 lf.timestamp = (arr[45]<<8|arr[44]);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	332d      	adds	r3, #45	; 0x2d
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	021b      	lsls	r3, r3, #8
 80006aa:	b21a      	sxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	332c      	adds	r3, #44	; 0x2c
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b21b      	sxth	r3, r3
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	 lf.crc8 = arr[46];
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80006c4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

	 float angle_step= (lf.end_angle - lf.start_angle)/(47-1);//potential problem
 80006c8:	f8d7 2066 	ldr.w	r2, [r7, #102]	; 0x66
 80006cc:	4613      	mov	r3, r2
 80006ce:	461a      	mov	r2, r3
 80006d0:	f8d7 300e 	ldr.w	r3, [r7, #14]
 80006d4:	ee07 2a90 	vmov	s15, r2
 80006d8:	ee07 3a10 	vmov	s14, r3
 80006dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80006e0:	eddf 6a54 	vldr	s13, [pc, #336]	; 8000834 <AssignVal+0x238>
 80006e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	 for (int i =0; i<12; ++i){
 80006ec:	2300      	movs	r3, #0
 80006ee:	677b      	str	r3, [r7, #116]	; 0x74
 80006f0:	e04d      	b.n	800078e <AssignVal+0x192>
		 lf.point[i].angle = lf.start_angle + angle_step*(i);//gives the point an angle. like 310 + 2 = 312
 80006f2:	f8d7 300e 	ldr.w	r3, [r7, #14]
 80006f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80006f8:	ee07 2a90 	vmov	s15, r2
 80006fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000700:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8000704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000708:	ee07 3a10 	vmov	s14, r3
 800070c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000710:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000712:	4613      	mov	r3, r2
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	1a9b      	subs	r3, r3, r2
 8000718:	3378      	adds	r3, #120	; 0x78
 800071a:	443b      	add	r3, r7
 800071c:	3b68      	subs	r3, #104	; 0x68
 800071e:	3302      	adds	r3, #2
 8000720:	ee17 2a90 	vmov	r2, s15
 8000724:	601a      	str	r2, [r3, #0]

		 lf.point[i].distance = (arr[8 + i * 3 - 1] << 8 | arr[8 + i * 3 - 2]);
 8000726:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000728:	4613      	mov	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	4413      	add	r3, r2
 800072e:	3307      	adds	r3, #7
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	b219      	sxth	r1, r3
 800073a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	3306      	adds	r3, #6
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b21b      	sxth	r3, r3
 800074c:	430b      	orrs	r3, r1
 800074e:	b21b      	sxth	r3, r3
 8000750:	b299      	uxth	r1, r3
 8000752:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000754:	4613      	mov	r3, r2
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	1a9b      	subs	r3, r3, r2
 800075a:	3378      	adds	r3, #120	; 0x78
 800075c:	443b      	add	r3, r7
 800075e:	3b62      	subs	r3, #98	; 0x62
 8000760:	460a      	mov	r2, r1
 8000762:	801a      	strh	r2, [r3, #0]
		 lf.point[i].confidence = arr[8 + i * 3];
 8000764:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000766:	4613      	mov	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4413      	add	r3, r2
 800076c:	3308      	adds	r3, #8
 800076e:	461a      	mov	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4413      	add	r3, r2
 8000774:	7819      	ldrb	r1, [r3, #0]
 8000776:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000778:	4613      	mov	r3, r2
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	1a9b      	subs	r3, r3, r2
 800077e:	3378      	adds	r3, #120	; 0x78
 8000780:	443b      	add	r3, r7
 8000782:	3b60      	subs	r3, #96	; 0x60
 8000784:	460a      	mov	r2, r1
 8000786:	701a      	strb	r2, [r3, #0]
	 for (int i =0; i<12; ++i){
 8000788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800078a:	3301      	adds	r3, #1
 800078c:	677b      	str	r3, [r7, #116]	; 0x74
 800078e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000790:	2b0b      	cmp	r3, #11
 8000792:	ddae      	ble.n	80006f2 <AssignVal+0xf6>

	 }
	 //potential problem
	 //saving the angle reading on the right side of the lidar assuming that i Can process other info quick enough
	 if (lf.start_angle>=84 && lf.end_angle<=96){
 8000794:	f8d7 300e 	ldr.w	r3, [r7, #14]
 8000798:	eddf 7a27 	vldr	s15, [pc, #156]	; 8000838 <AssignVal+0x23c>
 800079c:	ee07 3a10 	vmov	s14, r3
 80007a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a8:	db13      	blt.n	80007d2 <AssignVal+0x1d6>
 80007aa:	f8d7 3066 	ldr.w	r3, [r7, #102]	; 0x66
 80007ae:	eddf 7a23 	vldr	s15, [pc, #140]	; 800083c <AssignVal+0x240>
 80007b2:	ee07 3a10 	vmov	s14, r3
 80007b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007be:	d808      	bhi.n	80007d2 <AssignVal+0x1d6>
		 L0 = lf;//potential problem
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <AssignVal+0x244>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	2265      	movs	r2, #101	; 0x65
 80007ca:	4619      	mov	r1, r3
 80007cc:	f005 ff90 	bl	80066f0 <memcpy>
	 else if (lf.start_angle>= 264 && lf.end_angle<=276)
	 {
		 MoveAlgorithm(L0,lf);
	 }

}
 80007d0:	e02a      	b.n	8000828 <AssignVal+0x22c>
	 else if (lf.start_angle>= 264 && lf.end_angle<=276)
 80007d2:	f8d7 300e 	ldr.w	r3, [r7, #14]
 80007d6:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8000844 <AssignVal+0x248>
 80007da:	ee07 3a10 	vmov	s14, r3
 80007de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e6:	da00      	bge.n	80007ea <AssignVal+0x1ee>
}
 80007e8:	e01e      	b.n	8000828 <AssignVal+0x22c>
	 else if (lf.start_angle>= 264 && lf.end_angle<=276)
 80007ea:	f8d7 3066 	ldr.w	r3, [r7, #102]	; 0x66
 80007ee:	eddf 7a16 	vldr	s15, [pc, #88]	; 8000848 <AssignVal+0x24c>
 80007f2:	ee07 3a10 	vmov	s14, r3
 80007f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fe:	d900      	bls.n	8000802 <AssignVal+0x206>
}
 8000800:	e012      	b.n	8000828 <AssignVal+0x22c>
		 MoveAlgorithm(L0,lf);
 8000802:	4c0f      	ldr	r4, [pc, #60]	; (8000840 <AssignVal+0x244>)
 8000804:	a816      	add	r0, sp, #88	; 0x58
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2265      	movs	r2, #101	; 0x65
 800080c:	4619      	mov	r1, r3
 800080e:	f005 ff6f 	bl	80066f0 <memcpy>
 8000812:	4668      	mov	r0, sp
 8000814:	f104 0310 	add.w	r3, r4, #16
 8000818:	2255      	movs	r2, #85	; 0x55
 800081a:	4619      	mov	r1, r3
 800081c:	f005 ff68 	bl	80066f0 <memcpy>
 8000820:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000824:	f000 f812 	bl	800084c <MoveAlgorithm>
}
 8000828:	bf00      	nop
 800082a:	377c      	adds	r7, #124	; 0x7c
 800082c:	46bd      	mov	sp, r7
 800082e:	bd90      	pop	{r4, r7, pc}
 8000830:	51eb851f 	.word	0x51eb851f
 8000834:	42380000 	.word	0x42380000
 8000838:	42a80000 	.word	0x42a80000
 800083c:	42c00000 	.word	0x42c00000
 8000840:	20000168 	.word	0x20000168
 8000844:	43840000 	.word	0x43840000
 8000848:	438a0000 	.word	0x438a0000

0800084c <MoveAlgorithm>:

void MoveAlgorithm(LiDARFrameTypeDef L0,LiDARFrameTypeDef L1){
 800084c:	b084      	sub	sp, #16
 800084e:	b490      	push	{r4, r7}
 8000850:	af00      	add	r7, sp, #0
 8000852:	f107 0408 	add.w	r4, r7, #8
 8000856:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//Approaching a right turn
	if (L0.point[0].distance - L1.point[11].distance > 50){
 800085a:	8afb      	ldrh	r3, [r7, #22]
 800085c:	461a      	mov	r2, r3
 800085e:	f8b7 30cb 	ldrh.w	r3, [r7, #203]	; 0xcb
 8000862:	b29b      	uxth	r3, r3
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	2b32      	cmp	r3, #50	; 0x32
 8000868:	dd03      	ble.n	8000872 <MoveAlgorithm+0x26>
		TIM1->CCR2 = 160;
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MoveAlgorithm+0x50>)
 800086c:	22a0      	movs	r2, #160	; 0xa0
 800086e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else if ( L1.point[11].distance - L0.point[0].distance > 50){
		TIM1->CCR2 = 140;
	}
	else {TIM1->CCR2 = 150;}
}
 8000870:	e00e      	b.n	8000890 <MoveAlgorithm+0x44>
	else if ( L1.point[11].distance - L0.point[0].distance > 50){
 8000872:	f8b7 30cb 	ldrh.w	r3, [r7, #203]	; 0xcb
 8000876:	b29b      	uxth	r3, r3
 8000878:	461a      	mov	r2, r3
 800087a:	8afb      	ldrh	r3, [r7, #22]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	2b32      	cmp	r3, #50	; 0x32
 8000880:	dd03      	ble.n	800088a <MoveAlgorithm+0x3e>
		TIM1->CCR2 = 140;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MoveAlgorithm+0x50>)
 8000884:	228c      	movs	r2, #140	; 0x8c
 8000886:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000888:	e002      	b.n	8000890 <MoveAlgorithm+0x44>
	else {TIM1->CCR2 = 150;}
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <MoveAlgorithm+0x50>)
 800088c:	2296      	movs	r2, #150	; 0x96
 800088e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc90      	pop	{r4, r7}
 8000896:	b004      	add	sp, #16
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40010000 	.word	0x40010000

080008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a4:	f000 fe25 	bl	80014f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a8:	f000 f840 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ac:	f000 fa44 	bl	8000d38 <MX_GPIO_Init>
  MX_DMA_Init();
 80008b0:	f000 fa24 	bl	8000cfc <MX_DMA_Init>
  MX_USART3_UART_Init();
 80008b4:	f000 f9c4 	bl	8000c40 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008b8:	f000 f9f2 	bl	8000ca0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80008bc:	f000 f990 	bl	8000be0 <MX_USART2_UART_Init>
  MX_ETH_Init();
 80008c0:	f000 f8a4 	bl	8000a0c <MX_ETH_Init>
  MX_TIM1_Init();
 80008c4:	f000 f8f0 	bl	8000aa8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//ESC
 80008c8:	2100      	movs	r1, #0
 80008ca:	4812      	ldr	r0, [pc, #72]	; (8000914 <main+0x74>)
 80008cc:	f003 fb96 	bl	8003ffc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//SERVO
 80008d0:	2104      	movs	r1, #4
 80008d2:	4810      	ldr	r0, [pc, #64]	; (8000914 <main+0x74>)
 80008d4:	f003 fb92 	bl	8003ffc <HAL_TIM_PWM_Start>
	TIM1->CCR1 = 160;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <main+0x78>)
 80008da:	22a0      	movs	r2, #160	; 0xa0
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {//Look at the parameters to let you know what you are receiving
	  if (count <= 46){
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <main+0x7c>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b2e      	cmp	r3, #46	; 0x2e
 80008e4:	d805      	bhi.n	80008f2 <main+0x52>
		  HAL_UART_Receive_DMA(&huart2,&lidar_temp_data,1);
 80008e6:	2201      	movs	r2, #1
 80008e8:	490d      	ldr	r1, [pc, #52]	; (8000920 <main+0x80>)
 80008ea:	480e      	ldr	r0, [pc, #56]	; (8000924 <main+0x84>)
 80008ec:	f004 fa12 	bl	8004d14 <HAL_UART_Receive_DMA>
 80008f0:	e7f5      	b.n	80008de <main+0x3e>
	  }

	  else {
		  //Transmission is for us to see on the real term
		 // HAL_UART_Transmit(&huart3,(uint8_t*)databuffer,47,100);
          if (CalCRC8((uint8_t*)databuffer, count)== databuffer[46]){
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <main+0x7c>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4619      	mov	r1, r3
 80008f8:	480b      	ldr	r0, [pc, #44]	; (8000928 <main+0x88>)
 80008fa:	f7ff fe1f 	bl	800053c <CalCRC8>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <main+0x88>)
 8000904:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000908:	429a      	cmp	r2, r3
 800090a:	d1e8      	bne.n	80008de <main+0x3e>
        	  AssignVal(databuffer);
 800090c:	4806      	ldr	r0, [pc, #24]	; (8000928 <main+0x88>)
 800090e:	f7ff fe75 	bl	80005fc <AssignVal>
	  if (count <= 46){
 8000912:	e7e4      	b.n	80008de <main+0x3e>
 8000914:	200002b8 	.word	0x200002b8
 8000918:	40010000 	.word	0x40010000
 800091c:	200009af 	.word	0x200009af
 8000920:	2000097c 	.word	0x2000097c
 8000924:	20000304 	.word	0x20000304
 8000928:	20000980 	.word	0x20000980

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	; 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	2234      	movs	r2, #52	; 0x34
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f005 fee6 	bl	800670c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000950:	f002 f9a0 	bl	8002c94 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <SystemClock_Config+0xd8>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a2a      	ldr	r2, [pc, #168]	; (8000a04 <SystemClock_Config+0xd8>)
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <SystemClock_Config+0xd8>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <SystemClock_Config+0xdc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a25      	ldr	r2, [pc, #148]	; (8000a08 <SystemClock_Config+0xdc>)
 8000972:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <SystemClock_Config+0xdc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000988:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800098c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800099c:	23d8      	movs	r3, #216	; 0xd8
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80009a4:	2309      	movs	r3, #9
 80009a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 f9cf 	bl	8002d54 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009bc:	f000 fa6a 	bl	8000e94 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009c0:	f002 f978 	bl	8002cb4 <HAL_PWREx_EnableOverDrive>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80009ca:	f000 fa63 	bl	8000e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ce:	230f      	movs	r3, #15
 80009d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d2:	2302      	movs	r3, #2
 80009d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	2107      	movs	r1, #7
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 fc5f 	bl	80032b0 <HAL_RCC_ClockConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009f8:	f000 fa4c 	bl	8000e94 <Error_Handler>
  }
}
 80009fc:	bf00      	nop
 80009fe:	3750      	adds	r7, #80	; 0x50
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40007000 	.word	0x40007000

08000a0c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_ETH_Init+0x84>)
 8000a12:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <MX_ETH_Init+0x88>)
 8000a14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a16:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <MX_ETH_Init+0x8c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <MX_ETH_Init+0x8c>)
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a22:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <MX_ETH_Init+0x8c>)
 8000a24:	22e1      	movs	r2, #225	; 0xe1
 8000a26:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_ETH_Init+0x8c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_ETH_Init+0x8c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_ETH_Init+0x8c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_ETH_Init+0x84>)
 8000a3c:	4a16      	ldr	r2, [pc, #88]	; (8000a98 <MX_ETH_Init+0x8c>)
 8000a3e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_ETH_Init+0x84>)
 8000a42:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a46:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_ETH_Init+0x84>)
 8000a4a:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <MX_ETH_Init+0x90>)
 8000a4c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_ETH_Init+0x84>)
 8000a50:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <MX_ETH_Init+0x94>)
 8000a52:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_ETH_Init+0x84>)
 8000a56:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a5a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_ETH_Init+0x84>)
 8000a5e:	f001 fae5 	bl	800202c <HAL_ETH_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a68:	f000 fa14 	bl	8000e94 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a6c:	2238      	movs	r2, #56	; 0x38
 8000a6e:	2100      	movs	r1, #0
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_ETH_Init+0x98>)
 8000a72:	f005 fe4b 	bl	800670c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_ETH_Init+0x98>)
 8000a78:	2221      	movs	r2, #33	; 0x21
 8000a7a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_ETH_Init+0x98>)
 8000a7e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a82:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <MX_ETH_Init+0x98>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000208 	.word	0x20000208
 8000a94:	40028000 	.word	0x40028000
 8000a98:	200009b0 	.word	0x200009b0
 8000a9c:	200000ac 	.word	0x200000ac
 8000aa0:	2000000c 	.word	0x2000000c
 8000aa4:	200001d0 	.word	0x200001d0

08000aa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b096      	sub	sp, #88	; 0x58
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]
 8000aca:	615a      	str	r2, [r3, #20]
 8000acc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	222c      	movs	r2, #44	; 0x2c
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f005 fe19 	bl	800670c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ada:	4b3f      	ldr	r3, [pc, #252]	; (8000bd8 <MX_TIM1_Init+0x130>)
 8000adc:	4a3f      	ldr	r2, [pc, #252]	; (8000bdc <MX_TIM1_Init+0x134>)
 8000ade:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2*1080-1;
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	; (8000bd8 <MX_TIM1_Init+0x130>)
 8000ae2:	f640 026f 	movw	r2, #2159	; 0x86f
 8000ae6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b3b      	ldr	r3, [pc, #236]	; (8000bd8 <MX_TIM1_Init+0x130>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000aee:	4b3a      	ldr	r3, [pc, #232]	; (8000bd8 <MX_TIM1_Init+0x130>)
 8000af0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <MX_TIM1_Init+0x130>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000afc:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <MX_TIM1_Init+0x130>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b35      	ldr	r3, [pc, #212]	; (8000bd8 <MX_TIM1_Init+0x130>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b08:	4833      	ldr	r0, [pc, #204]	; (8000bd8 <MX_TIM1_Init+0x130>)
 8000b0a:	f003 fa1f 	bl	8003f4c <HAL_TIM_PWM_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000b14:	f000 f9be 	bl	8000e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b28:	4619      	mov	r1, r3
 8000b2a:	482b      	ldr	r0, [pc, #172]	; (8000bd8 <MX_TIM1_Init+0x130>)
 8000b2c:	f003 ff98 	bl	8004a60 <HAL_TIMEx_MasterConfigSynchronization>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b36:	f000 f9ad 	bl	8000e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3a:	2360      	movs	r3, #96	; 0x60
 8000b3c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b42:	2300      	movs	r3, #0
 8000b44:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b46:	2300      	movs	r3, #0
 8000b48:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <MX_TIM1_Init+0x130>)
 8000b60:	f003 fb46 	bl	80041f0 <HAL_TIM_PWM_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000b6a:	f000 f993 	bl	8000e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b72:	2204      	movs	r2, #4
 8000b74:	4619      	mov	r1, r3
 8000b76:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <MX_TIM1_Init+0x130>)
 8000b78:	f003 fb3a 	bl	80041f0 <HAL_TIM_PWM_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000b82:	f000 f987 	bl	8000e94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_TIM1_Init+0x130>)
 8000bbc:	f003 ffde 	bl	8004b7c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8000bc6:	f000 f965 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bca:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <MX_TIM1_Init+0x130>)
 8000bcc:	f000 fa64 	bl	8001098 <HAL_TIM_MspPostInit>

}
 8000bd0:	bf00      	nop
 8000bd2:	3758      	adds	r7, #88	; 0x58
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200002b8 	.word	0x200002b8
 8000bdc:	40010000 	.word	0x40010000

08000be0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_USART2_UART_Init+0x58>)
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <MX_USART2_UART_Init+0x5c>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_USART2_UART_Init+0x58>)
 8000bec:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_USART2_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_USART2_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_USART2_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_USART2_UART_Init+0x58>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_USART2_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_USART2_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_USART2_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_USART2_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_USART2_UART_Init+0x58>)
 8000c24:	f004 f828 	bl	8004c78 <HAL_UART_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c2e:	f000 f931 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000304 	.word	0x20000304
 8000c3c:	40004400 	.word	0x40004400

08000c40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_USART3_UART_Init+0x58>)
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <MX_USART3_UART_Init+0x5c>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_USART3_UART_Init+0x58>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_USART3_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_USART3_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_USART3_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_USART3_UART_Init+0x58>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_USART3_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_USART3_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_USART3_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_USART3_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_USART3_UART_Init+0x58>)
 8000c84:	f003 fff8 	bl	8004c78 <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c8e:	f000 f901 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000038c 	.word	0x2000038c
 8000c9c:	40004800 	.word	0x40004800

08000ca0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000caa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cae:	2206      	movs	r2, #6
 8000cb0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ce4:	f001 fe8d 	bl	8002a02 <HAL_PCD_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cee:	f000 f8d1 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000474 	.word	0x20000474

08000cfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_DMA_Init+0x38>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <MX_DMA_Init+0x38>)
 8000d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_DMA_Init+0x38>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2010      	movs	r0, #16
 8000d20:	f000 fd43 	bl	80017aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d24:	2010      	movs	r0, #16
 8000d26:	f000 fd5c 	bl	80017e2 <HAL_NVIC_EnableIRQ>

}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	; 0x30
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	4b4d      	ldr	r3, [pc, #308]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a4c      	ldr	r2, [pc, #304]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b4a      	ldr	r3, [pc, #296]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	61bb      	str	r3, [r7, #24]
 8000d64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d66:	4b47      	ldr	r3, [pc, #284]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a46      	ldr	r2, [pc, #280]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b44      	ldr	r3, [pc, #272]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a40      	ldr	r2, [pc, #256]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b3e      	ldr	r3, [pc, #248]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a3a      	ldr	r2, [pc, #232]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dae:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a34      	ldr	r2, [pc, #208]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000db4:	f043 0310 	orr.w	r3, r3, #16
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0310 	and.w	r3, r3, #16
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc6:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a2e      	ldr	r2, [pc, #184]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dde:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <MX_GPIO_Init+0x14c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000dfc:	4822      	ldr	r0, [pc, #136]	; (8000e88 <MX_GPIO_Init+0x150>)
 8000dfe:	f001 fde7 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2140      	movs	r1, #64	; 0x40
 8000e06:	4821      	ldr	r0, [pc, #132]	; (8000e8c <MX_GPIO_Init+0x154>)
 8000e08:	f001 fde2 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	481b      	ldr	r0, [pc, #108]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000e24:	f001 fc28 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e28:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4811      	ldr	r0, [pc, #68]	; (8000e88 <MX_GPIO_Init+0x150>)
 8000e42:	f001 fc19 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e46:	2340      	movs	r3, #64	; 0x40
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <MX_GPIO_Init+0x154>)
 8000e5e:	f001 fc0b 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_GPIO_Init+0x154>)
 8000e76:	f001 fbff 	bl	8002678 <HAL_GPIO_Init>

}
 8000e7a:	bf00      	nop
 8000e7c:	3730      	adds	r7, #48	; 0x30
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	40021800 	.word	0x40021800
 8000e90:	40020800 	.word	0x40020800

08000e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <Error_Handler+0x8>
	...

08000ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_MspInit+0x44>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_MspInit+0x44>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08e      	sub	sp, #56	; 0x38
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a4e      	ldr	r2, [pc, #312]	; (8001040 <HAL_ETH_MspInit+0x158>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	f040 8096 	bne.w	8001038 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f0c:	4b4d      	ldr	r3, [pc, #308]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	4a4c      	ldr	r2, [pc, #304]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f16:	6313      	str	r3, [r2, #48]	; 0x30
 8000f18:	4b4a      	ldr	r3, [pc, #296]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f20:	623b      	str	r3, [r7, #32]
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	4b47      	ldr	r3, [pc, #284]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4a46      	ldr	r2, [pc, #280]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f30:	4b44      	ldr	r3, [pc, #272]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f38:	61fb      	str	r3, [r7, #28]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	4b41      	ldr	r3, [pc, #260]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	4a40      	ldr	r2, [pc, #256]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f46:	6313      	str	r3, [r2, #48]	; 0x30
 8000f48:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f54:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a3a      	ldr	r2, [pc, #232]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f60:	4b38      	ldr	r3, [pc, #224]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b35      	ldr	r3, [pc, #212]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a34      	ldr	r2, [pc, #208]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b32      	ldr	r3, [pc, #200]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f84:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a2e      	ldr	r2, [pc, #184]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f90:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f9c:	4b29      	ldr	r3, [pc, #164]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4a28      	ldr	r2, [pc, #160]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_ETH_MspInit+0x15c>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fb4:	2332      	movs	r3, #50	; 0x32
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc4:	230b      	movs	r3, #11
 8000fc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481e      	ldr	r0, [pc, #120]	; (8001048 <HAL_ETH_MspInit+0x160>)
 8000fd0:	f001 fb52 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fd4:	2386      	movs	r3, #134	; 0x86
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe4:	230b      	movs	r3, #11
 8000fe6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fec:	4619      	mov	r1, r3
 8000fee:	4817      	ldr	r0, [pc, #92]	; (800104c <HAL_ETH_MspInit+0x164>)
 8000ff0:	f001 fb42 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001006:	230b      	movs	r3, #11
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	4619      	mov	r1, r3
 8001010:	480f      	ldr	r0, [pc, #60]	; (8001050 <HAL_ETH_MspInit+0x168>)
 8001012:	f001 fb31 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001016:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001028:	230b      	movs	r3, #11
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	4808      	ldr	r0, [pc, #32]	; (8001054 <HAL_ETH_MspInit+0x16c>)
 8001034:	f001 fb20 	bl	8002678 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001038:	bf00      	nop
 800103a:	3738      	adds	r7, #56	; 0x38
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40028000 	.word	0x40028000
 8001044:	40023800 	.word	0x40023800
 8001048:	40020800 	.word	0x40020800
 800104c:	40020000 	.word	0x40020000
 8001050:	40020400 	.word	0x40020400
 8001054:	40021800 	.word	0x40021800

08001058 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_TIM_PWM_MspInit+0x38>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10b      	bne.n	8001082 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_TIM_PWM_MspInit+0x3c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a09      	ldr	r2, [pc, #36]	; (8001094 <HAL_TIM_PWM_MspInit+0x3c>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_TIM_PWM_MspInit+0x3c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40010000 	.word	0x40010000
 8001094:	40023800 	.word	0x40023800

08001098 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a11      	ldr	r2, [pc, #68]	; (80010fc <HAL_TIM_MspPostInit+0x64>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d11c      	bne.n	80010f4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_TIM_MspPostInit+0x68>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a10      	ldr	r2, [pc, #64]	; (8001100 <HAL_TIM_MspPostInit+0x68>)
 80010c0:	f043 0310 	orr.w	r3, r3, #16
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_TIM_MspPostInit+0x68>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0310 	and.w	r3, r3, #16
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80010d2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80010d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	4619      	mov	r1, r3
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_TIM_MspPostInit+0x6c>)
 80010f0:	f001 fac2 	bl	8002678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40010000 	.word	0x40010000
 8001100:	40023800 	.word	0x40023800
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b0b0      	sub	sp, #192	; 0xc0
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	2290      	movs	r2, #144	; 0x90
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f005 faef 	bl	800670c <memset>
  if(huart->Instance==USART2)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a6f      	ldr	r2, [pc, #444]	; (80012f0 <HAL_UART_MspInit+0x1e8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	f040 8094 	bne.w	8001262 <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800113e:	2300      	movs	r3, #0
 8001140:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4618      	mov	r0, r3
 8001148:	f002 fad8 	bl	80036fc <HAL_RCCEx_PeriphCLKConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001152:	f7ff fe9f 	bl	8000e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001156:	4b67      	ldr	r3, [pc, #412]	; (80012f4 <HAL_UART_MspInit+0x1ec>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a66      	ldr	r2, [pc, #408]	; (80012f4 <HAL_UART_MspInit+0x1ec>)
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b64      	ldr	r3, [pc, #400]	; (80012f4 <HAL_UART_MspInit+0x1ec>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b61      	ldr	r3, [pc, #388]	; (80012f4 <HAL_UART_MspInit+0x1ec>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a60      	ldr	r2, [pc, #384]	; (80012f4 <HAL_UART_MspInit+0x1ec>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b5e      	ldr	r3, [pc, #376]	; (80012f4 <HAL_UART_MspInit+0x1ec>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	4b5b      	ldr	r3, [pc, #364]	; (80012f4 <HAL_UART_MspInit+0x1ec>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a5a      	ldr	r2, [pc, #360]	; (80012f4 <HAL_UART_MspInit+0x1ec>)
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b58      	ldr	r3, [pc, #352]	; (80012f4 <HAL_UART_MspInit+0x1ec>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800119e:	2308      	movs	r3, #8
 80011a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b6:	2307      	movs	r3, #7
 80011b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011c0:	4619      	mov	r1, r3
 80011c2:	484d      	ldr	r0, [pc, #308]	; (80012f8 <HAL_UART_MspInit+0x1f0>)
 80011c4:	f001 fa58 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011c8:	2320      	movs	r3, #32
 80011ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011e0:	2307      	movs	r3, #7
 80011e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011ea:	4619      	mov	r1, r3
 80011ec:	4843      	ldr	r0, [pc, #268]	; (80012fc <HAL_UART_MspInit+0x1f4>)
 80011ee:	f001 fa43 	bl	8002678 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80011f2:	4b43      	ldr	r3, [pc, #268]	; (8001300 <HAL_UART_MspInit+0x1f8>)
 80011f4:	4a43      	ldr	r2, [pc, #268]	; (8001304 <HAL_UART_MspInit+0x1fc>)
 80011f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80011f8:	4b41      	ldr	r3, [pc, #260]	; (8001300 <HAL_UART_MspInit+0x1f8>)
 80011fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001200:	4b3f      	ldr	r3, [pc, #252]	; (8001300 <HAL_UART_MspInit+0x1f8>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001206:	4b3e      	ldr	r3, [pc, #248]	; (8001300 <HAL_UART_MspInit+0x1f8>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800120c:	4b3c      	ldr	r3, [pc, #240]	; (8001300 <HAL_UART_MspInit+0x1f8>)
 800120e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001212:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001214:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <HAL_UART_MspInit+0x1f8>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <HAL_UART_MspInit+0x1f8>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001220:	4b37      	ldr	r3, [pc, #220]	; (8001300 <HAL_UART_MspInit+0x1f8>)
 8001222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001226:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001228:	4b35      	ldr	r3, [pc, #212]	; (8001300 <HAL_UART_MspInit+0x1f8>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800122e:	4b34      	ldr	r3, [pc, #208]	; (8001300 <HAL_UART_MspInit+0x1f8>)
 8001230:	2200      	movs	r2, #0
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001234:	4832      	ldr	r0, [pc, #200]	; (8001300 <HAL_UART_MspInit+0x1f8>)
 8001236:	f000 faef 	bl	8001818 <HAL_DMA_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8001240:	f7ff fe28 	bl	8000e94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a2e      	ldr	r2, [pc, #184]	; (8001300 <HAL_UART_MspInit+0x1f8>)
 8001248:	675a      	str	r2, [r3, #116]	; 0x74
 800124a:	4a2d      	ldr	r2, [pc, #180]	; (8001300 <HAL_UART_MspInit+0x1f8>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	2026      	movs	r0, #38	; 0x26
 8001256:	f000 faa8 	bl	80017aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800125a:	2026      	movs	r0, #38	; 0x26
 800125c:	f000 fac1 	bl	80017e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001260:	e041      	b.n	80012e6 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART3)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a28      	ldr	r2, [pc, #160]	; (8001308 <HAL_UART_MspInit+0x200>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d13c      	bne.n	80012e6 <HAL_UART_MspInit+0x1de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800126c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001270:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001272:	2300      	movs	r3, #0
 8001274:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4618      	mov	r0, r3
 800127c:	f002 fa3e 	bl	80036fc <HAL_RCCEx_PeriphCLKConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_UART_MspInit+0x182>
      Error_Handler();
 8001286:	f7ff fe05 	bl	8000e94 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <HAL_UART_MspInit+0x1ec>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <HAL_UART_MspInit+0x1ec>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_UART_MspInit+0x1ec>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_UART_MspInit+0x1ec>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <HAL_UART_MspInit+0x1ec>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_UART_MspInit+0x1ec>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012d4:	2307      	movs	r3, #7
 80012d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012de:	4619      	mov	r1, r3
 80012e0:	4806      	ldr	r0, [pc, #24]	; (80012fc <HAL_UART_MspInit+0x1f4>)
 80012e2:	f001 f9c9 	bl	8002678 <HAL_GPIO_Init>
}
 80012e6:	bf00      	nop
 80012e8:	37c0      	adds	r7, #192	; 0xc0
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40004400 	.word	0x40004400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40020c00 	.word	0x40020c00
 8001300:	20000414 	.word	0x20000414
 8001304:	40026088 	.word	0x40026088
 8001308:	40004800 	.word	0x40004800

0800130c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0ae      	sub	sp, #184	; 0xb8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2290      	movs	r2, #144	; 0x90
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f005 f9ed 	bl	800670c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800133a:	d159      	bne.n	80013f0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800133c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001340:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4618      	mov	r0, r3
 800134e:	f002 f9d5 	bl	80036fc <HAL_RCCEx_PeriphCLKConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001358:	f7ff fd9c 	bl	8000e94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <HAL_PCD_MspInit+0xec>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a25      	ldr	r2, [pc, #148]	; (80013f8 <HAL_PCD_MspInit+0xec>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
 8001368:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <HAL_PCD_MspInit+0xec>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001374:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800138e:	230a      	movs	r3, #10
 8001390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001398:	4619      	mov	r1, r3
 800139a:	4818      	ldr	r0, [pc, #96]	; (80013fc <HAL_PCD_MspInit+0xf0>)
 800139c:	f001 f96c 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013b8:	4619      	mov	r1, r3
 80013ba:	4810      	ldr	r0, [pc, #64]	; (80013fc <HAL_PCD_MspInit+0xf0>)
 80013bc:	f001 f95c 	bl	8002678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_PCD_MspInit+0xec>)
 80013c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c4:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <HAL_PCD_MspInit+0xec>)
 80013c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ca:	6353      	str	r3, [r2, #52]	; 0x34
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_PCD_MspInit+0xec>)
 80013ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <HAL_PCD_MspInit+0xec>)
 80013da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <HAL_PCD_MspInit+0xec>)
 80013de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e2:	6453      	str	r3, [r2, #68]	; 0x44
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <HAL_PCD_MspInit+0xec>)
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	37b8      	adds	r7, #184	; 0xb8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020000 	.word	0x40020000

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144c:	f000 f88e 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <DMA1_Stream5_IRQHandler+0x10>)
 800145a:	f000 fb7d 	bl	8001b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000414 	.word	0x20000414

08001468 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <USART2_IRQHandler+0x10>)
 800146e:	f003 fc95 	bl	8004d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000304 	.word	0x20000304

0800147c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014a6:	490e      	ldr	r1, [pc, #56]	; (80014e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014bc:	4c0b      	ldr	r4, [pc, #44]	; (80014ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ca:	f7ff ffd7 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ce:	f005 f8eb 	bl	80066a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff f9e5 	bl	80008a0 <main>
  bx  lr    
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014e4:	08006864 	.word	0x08006864
  ldr r2, =_sbss
 80014e8:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80014ec:	200009bc 	.word	0x200009bc

080014f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>

080014f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f6:	2003      	movs	r0, #3
 80014f8:	f000 f94c 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fc:	2000      	movs	r0, #0
 80014fe:	f000 f805 	bl	800150c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001502:	f7ff fccd 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x54>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x58>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f967 	bl	80017fe <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 f92f 	bl	80017aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_InitTick+0x5c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000000 	.word	0x20000000
 8001564:	20000008 	.word	0x20000008
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008
 8001590:	200009b8 	.word	0x200009b8

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200009b8 	.word	0x200009b8

080015ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff ffee 	bl	8001594 <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d005      	beq.n	80015d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_Delay+0x44>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d2:	bf00      	nop
 80015d4:	f7ff ffde 	bl	8001594 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d8f7      	bhi.n	80015d4 <HAL_Delay+0x28>
  {
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000008 	.word	0x20000008

080015f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <__NVIC_SetPriorityGrouping+0x40>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	4313      	orrs	r3, r2
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <__NVIC_SetPriorityGrouping+0x40>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00
 8001638:	05fa0000 	.word	0x05fa0000

0800163c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	db0b      	blt.n	8001682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f003 021f 	and.w	r2, r3, #31
 8001670:	4907      	ldr	r1, [pc, #28]	; (8001690 <__NVIC_EnableIRQ+0x38>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	2001      	movs	r0, #1
 800167a:	fa00 f202 	lsl.w	r2, r0, r2
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e100 	.word	0xe000e100

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001760:	d301      	bcc.n	8001766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <SysTick_Config+0x40>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	210f      	movs	r1, #15
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f7ff ff8e 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <SysTick_Config+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <SysTick_Config+0x40>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff29 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017bc:	f7ff ff3e 	bl	800163c <__NVIC_GetPriorityGrouping>
 80017c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff ff8e 	bl	80016e8 <NVIC_EncodePriority>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff5d 	bl	8001694 <__NVIC_SetPriority>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff31 	bl	8001658 <__NVIC_EnableIRQ>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ffa2 	bl	8001750 <SysTick_Config>
 800180c:	4603      	mov	r3, r0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff feb6 	bl	8001594 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e099      	b.n	8001968 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2202      	movs	r2, #2
 8001838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0201 	bic.w	r2, r2, #1
 8001852:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001854:	e00f      	b.n	8001876 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001856:	f7ff fe9d 	bl	8001594 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b05      	cmp	r3, #5
 8001862:	d908      	bls.n	8001876 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2220      	movs	r2, #32
 8001868:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2203      	movs	r2, #3
 800186e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e078      	b.n	8001968 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1e8      	bne.n	8001856 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	4b38      	ldr	r3, [pc, #224]	; (8001970 <HAL_DMA_Init+0x158>)
 8001890:	4013      	ands	r3, r2
 8001892:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d107      	bne.n	80018e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	4313      	orrs	r3, r2
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4313      	orrs	r3, r2
 80018de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f023 0307 	bic.w	r3, r3, #7
 80018f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	4313      	orrs	r3, r2
 8001900:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	2b04      	cmp	r3, #4
 8001908:	d117      	bne.n	800193a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	4313      	orrs	r3, r2
 8001912:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00e      	beq.n	800193a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 fb09 	bl	8001f34 <DMA_CheckFifoParam>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2240      	movs	r2, #64	; 0x40
 800192c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001936:	2301      	movs	r3, #1
 8001938:	e016      	b.n	8001968 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 fac0 	bl	8001ec8 <DMA_CalcBaseAndBitshift>
 8001948:	4603      	mov	r3, r0
 800194a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	223f      	movs	r2, #63	; 0x3f
 8001952:	409a      	lsls	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	e010803f 	.word	0xe010803f

08001974 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_DMA_Start_IT+0x26>
 8001996:	2302      	movs	r3, #2
 8001998:	e048      	b.n	8001a2c <HAL_DMA_Start_IT+0xb8>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d137      	bne.n	8001a1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2202      	movs	r2, #2
 80019b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 fa52 	bl	8001e6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019cc:	223f      	movs	r2, #63	; 0x3f
 80019ce:	409a      	lsls	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0216 	orr.w	r2, r2, #22
 80019e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019f2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d007      	beq.n	8001a0c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0208 	orr.w	r2, r2, #8
 8001a0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0201 	orr.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e005      	b.n	8001a2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a26:	2302      	movs	r3, #2
 8001a28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a42:	f7ff fda7 	bl	8001594 <HAL_GetTick>
 8001a46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d008      	beq.n	8001a66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e052      	b.n	8001b0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0216 	bic.w	r2, r2, #22
 8001a74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d103      	bne.n	8001a96 <HAL_DMA_Abort+0x62>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d007      	beq.n	8001aa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0208 	bic.w	r2, r2, #8
 8001aa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab6:	e013      	b.n	8001ae0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ab8:	f7ff fd6c 	bl	8001594 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d90c      	bls.n	8001ae0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e015      	b.n	8001b0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1e4      	bne.n	8001ab8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af2:	223f      	movs	r2, #63	; 0x3f
 8001af4:	409a      	lsls	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d004      	beq.n	8001b32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00c      	b.n	8001b4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2205      	movs	r2, #5
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001b64:	4b8e      	ldr	r3, [pc, #568]	; (8001da0 <HAL_DMA_IRQHandler+0x248>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a8e      	ldr	r2, [pc, #568]	; (8001da4 <HAL_DMA_IRQHandler+0x24c>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0a9b      	lsrs	r3, r3, #10
 8001b70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b82:	2208      	movs	r2, #8
 8001b84:	409a      	lsls	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01a      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0204 	bic.w	r2, r2, #4
 8001baa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc8:	2201      	movs	r2, #1
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d012      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	2201      	movs	r2, #1
 8001be8:	409a      	lsls	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	f043 0202 	orr.w	r2, r3, #2
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfe:	2204      	movs	r2, #4
 8001c00:	409a      	lsls	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d012      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c28:	f043 0204 	orr.w	r2, r3, #4
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c34:	2210      	movs	r2, #16
 8001c36:	409a      	lsls	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d043      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d03c      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c52:	2210      	movs	r2, #16
 8001c54:	409a      	lsls	r2, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d018      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d108      	bne.n	8001c88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d024      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	4798      	blx	r3
 8001c86:	e01f      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
 8001c98:	e016      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0208 	bic.w	r2, r2, #8
 8001cb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ccc:	2220      	movs	r2, #32
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 808f 	beq.w	8001df8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 8087 	beq.w	8001df8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	2220      	movs	r2, #32
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d136      	bne.n	8001d70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0216 	bic.w	r2, r2, #22
 8001d10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d103      	bne.n	8001d32 <HAL_DMA_IRQHandler+0x1da>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0208 	bic.w	r2, r2, #8
 8001d40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	223f      	movs	r2, #63	; 0x3f
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d07e      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
        }
        return;
 8001d6e:	e079      	b.n	8001e64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d01d      	beq.n	8001dba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10d      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d031      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
 8001d9c:	e02c      	b.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
 8001d9e:	bf00      	nop
 8001da0:	20000000 	.word	0x20000000
 8001da4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d023      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
 8001db8:	e01e      	b.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10f      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0210 	bic.w	r2, r2, #16
 8001dd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d032      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d022      	beq.n	8001e52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2205      	movs	r2, #5
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0201 	bic.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d307      	bcc.n	8001e40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f2      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x2cc>
 8001e3e:	e000      	b.n	8001e42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
 8001e62:	e000      	b.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e64:	bf00      	nop
    }
  }
}
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b40      	cmp	r3, #64	; 0x40
 8001e98:	d108      	bne.n	8001eac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eaa:	e007      	b.n	8001ebc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	60da      	str	r2, [r3, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3b10      	subs	r3, #16
 8001ed8:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <DMA_CalcBaseAndBitshift+0x60>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <DMA_CalcBaseAndBitshift+0x64>)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d908      	bls.n	8001f08 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <DMA_CalcBaseAndBitshift+0x68>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	1d1a      	adds	r2, r3, #4
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	659a      	str	r2, [r3, #88]	; 0x58
 8001f06:	e006      	b.n	8001f16 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <DMA_CalcBaseAndBitshift+0x68>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	aaaaaaab 	.word	0xaaaaaaab
 8001f2c:	0800684c 	.word	0x0800684c
 8001f30:	fffffc00 	.word	0xfffffc00

08001f34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d11f      	bne.n	8001f8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d856      	bhi.n	8002002 <DMA_CheckFifoParam+0xce>
 8001f54:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <DMA_CheckFifoParam+0x28>)
 8001f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5a:	bf00      	nop
 8001f5c:	08001f6d 	.word	0x08001f6d
 8001f60:	08001f7f 	.word	0x08001f7f
 8001f64:	08001f6d 	.word	0x08001f6d
 8001f68:	08002003 	.word	0x08002003
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d046      	beq.n	8002006 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f7c:	e043      	b.n	8002006 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f86:	d140      	bne.n	800200a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f8c:	e03d      	b.n	800200a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f96:	d121      	bne.n	8001fdc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d837      	bhi.n	800200e <DMA_CheckFifoParam+0xda>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <DMA_CheckFifoParam+0x70>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fbb 	.word	0x08001fbb
 8001fac:	08001fb5 	.word	0x08001fb5
 8001fb0:	08001fcd 	.word	0x08001fcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb8:	e030      	b.n	800201c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d025      	beq.n	8002012 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fca:	e022      	b.n	8002012 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fd4:	d11f      	bne.n	8002016 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fda:	e01c      	b.n	8002016 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d903      	bls.n	8001fea <DMA_CheckFifoParam+0xb6>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d003      	beq.n	8001ff0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fe8:	e018      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
      break;
 8001fee:	e015      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00e      	beq.n	800201a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8002000:	e00b      	b.n	800201a <DMA_CheckFifoParam+0xe6>
      break;
 8002002:	bf00      	nop
 8002004:	e00a      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 8002006:	bf00      	nop
 8002008:	e008      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 800200a:	bf00      	nop
 800200c:	e006      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 800200e:	bf00      	nop
 8002010:	e004      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 8002012:	bf00      	nop
 8002014:	e002      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;   
 8002016:	bf00      	nop
 8002018:	e000      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 800201a:	bf00      	nop
    }
  } 
  
  return status; 
 800201c:	7bfb      	ldrb	r3, [r7, #15]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop

0800202c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e06a      	b.n	8002114 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002044:	2b00      	cmp	r3, #0
 8002046:	d106      	bne.n	8002056 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2223      	movs	r2, #35	; 0x23
 800204c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7fe ff49 	bl	8000ee8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	4b31      	ldr	r3, [pc, #196]	; (800211c <HAL_ETH_Init+0xf0>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a30      	ldr	r2, [pc, #192]	; (800211c <HAL_ETH_Init+0xf0>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b2e      	ldr	r3, [pc, #184]	; (800211c <HAL_ETH_Init+0xf0>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <HAL_ETH_Init+0xf4>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4a2b      	ldr	r2, [pc, #172]	; (8002120 <HAL_ETH_Init+0xf4>)
 8002074:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002078:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800207a:	4b29      	ldr	r3, [pc, #164]	; (8002120 <HAL_ETH_Init+0xf4>)
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	4927      	ldr	r1, [pc, #156]	; (8002120 <HAL_ETH_Init+0xf4>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_ETH_Init+0xf4>)
 800208a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020a4:	f7ff fa76 	bl	8001594 <HAL_GetTick>
 80020a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80020aa:	e011      	b.n	80020d0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80020ac:	f7ff fa72 	bl	8001594 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020ba:	d909      	bls.n	80020d0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2204      	movs	r2, #4
 80020c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	22e0      	movs	r2, #224	; 0xe0
 80020c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e021      	b.n	8002114 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1e4      	bne.n	80020ac <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f958 	bl	8002398 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f9ff 	bl	80024ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fa55 	bl	800259e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	461a      	mov	r2, r3
 80020fa:	2100      	movs	r1, #0
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f9bd 	bl	800247c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2210      	movs	r2, #16
 800210e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40023800 	.word	0x40023800
 8002120:	40013800 	.word	0x40013800

08002124 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4b51      	ldr	r3, [pc, #324]	; (8002280 <ETH_SetMACConfig+0x15c>)
 800213a:	4013      	ands	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	7c1b      	ldrb	r3, [r3, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <ETH_SetMACConfig+0x28>
 8002146:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800214a:	e000      	b.n	800214e <ETH_SetMACConfig+0x2a>
 800214c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	7c5b      	ldrb	r3, [r3, #17]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <ETH_SetMACConfig+0x38>
 8002156:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800215a:	e000      	b.n	800215e <ETH_SetMACConfig+0x3a>
 800215c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800215e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002164:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	7fdb      	ldrb	r3, [r3, #31]
 800216a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800216c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002172:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	7f92      	ldrb	r2, [r2, #30]
 8002178:	2a00      	cmp	r2, #0
 800217a:	d102      	bne.n	8002182 <ETH_SetMACConfig+0x5e>
 800217c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002180:	e000      	b.n	8002184 <ETH_SetMACConfig+0x60>
 8002182:	2200      	movs	r2, #0
                        macconf->Speed |
 8002184:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	7f1b      	ldrb	r3, [r3, #28]
 800218a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800218c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002192:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	791b      	ldrb	r3, [r3, #4]
 8002198:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800219a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021a2:	2a00      	cmp	r2, #0
 80021a4:	d102      	bne.n	80021ac <ETH_SetMACConfig+0x88>
 80021a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021aa:	e000      	b.n	80021ae <ETH_SetMACConfig+0x8a>
 80021ac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	7bdb      	ldrb	r3, [r3, #15]
 80021b4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021b6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021c4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021c6:	4313      	orrs	r3, r2
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021de:	2001      	movs	r0, #1
 80021e0:	f7ff f9e4 	bl	80015ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80021fa:	4013      	ands	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002202:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800220a:	2a00      	cmp	r2, #0
 800220c:	d101      	bne.n	8002212 <ETH_SetMACConfig+0xee>
 800220e:	2280      	movs	r2, #128	; 0x80
 8002210:	e000      	b.n	8002214 <ETH_SetMACConfig+0xf0>
 8002212:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002214:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800221a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002222:	2a01      	cmp	r2, #1
 8002224:	d101      	bne.n	800222a <ETH_SetMACConfig+0x106>
 8002226:	2208      	movs	r2, #8
 8002228:	e000      	b.n	800222c <ETH_SetMACConfig+0x108>
 800222a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800222c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002234:	2a01      	cmp	r2, #1
 8002236:	d101      	bne.n	800223c <ETH_SetMACConfig+0x118>
 8002238:	2204      	movs	r2, #4
 800223a:	e000      	b.n	800223e <ETH_SetMACConfig+0x11a>
 800223c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800223e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002246:	2a01      	cmp	r2, #1
 8002248:	d101      	bne.n	800224e <ETH_SetMACConfig+0x12a>
 800224a:	2202      	movs	r2, #2
 800224c:	e000      	b.n	8002250 <ETH_SetMACConfig+0x12c>
 800224e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002250:	4313      	orrs	r3, r2
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002268:	2001      	movs	r0, #1
 800226a:	f7ff f99f 	bl	80015ac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	619a      	str	r2, [r3, #24]
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	ff20810f 	.word	0xff20810f

08002284 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <ETH_SetDMAConfig+0x110>)
 800229e:	4013      	ands	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	7b1b      	ldrb	r3, [r3, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <ETH_SetDMAConfig+0x2c>
 80022aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022ae:	e000      	b.n	80022b2 <ETH_SetDMAConfig+0x2e>
 80022b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	7b5b      	ldrb	r3, [r3, #13]
 80022b6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022b8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	7f52      	ldrb	r2, [r2, #29]
 80022be:	2a00      	cmp	r2, #0
 80022c0:	d102      	bne.n	80022c8 <ETH_SetDMAConfig+0x44>
 80022c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022c6:	e000      	b.n	80022ca <ETH_SetDMAConfig+0x46>
 80022c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	7b9b      	ldrb	r3, [r3, #14]
 80022d0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022d2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	7f1b      	ldrb	r3, [r3, #28]
 80022de:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80022e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	7f9b      	ldrb	r3, [r3, #30]
 80022e6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022e8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022f6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022f8:	4313      	orrs	r3, r2
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002308:	461a      	mov	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800231a:	2001      	movs	r0, #1
 800231c:	f7ff f946 	bl	80015ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002328:	461a      	mov	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	791b      	ldrb	r3, [r3, #4]
 8002332:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002338:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800233e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002344:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800234c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800234e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002356:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800235c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002366:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800236a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002378:	2001      	movs	r0, #1
 800237a:	f7ff f917 	bl	80015ac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	f8de3f23 	.word	0xf8de3f23

08002398 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b0a6      	sub	sp, #152	; 0x98
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80023ac:	2300      	movs	r3, #0
 80023ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80023c2:	2301      	movs	r3, #1
 80023c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023d4:	2300      	movs	r3, #0
 80023d6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80023fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023fe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002400:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002404:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800240c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002410:	4619      	mov	r1, r3
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff fe86 	bl	8002124 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002418:	2301      	movs	r3, #1
 800241a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800241c:	2301      	movs	r3, #1
 800241e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002420:	2301      	movs	r3, #1
 8002422:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002426:	2301      	movs	r3, #1
 8002428:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800243a:	2300      	movs	r3, #0
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800243e:	2301      	movs	r3, #1
 8002440:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002444:	2301      	movs	r3, #1
 8002446:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002448:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800244c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800244e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002452:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002458:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800245a:	2301      	movs	r3, #1
 800245c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002460:	2300      	movs	r3, #0
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002468:	f107 0308 	add.w	r3, r7, #8
 800246c:	4619      	mov	r1, r3
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ff08 	bl	8002284 <ETH_SetDMAConfig>
}
 8002474:	bf00      	nop
 8002476:	3798      	adds	r7, #152	; 0x98
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3305      	adds	r3, #5
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	3204      	adds	r2, #4
 8002494:	7812      	ldrb	r2, [r2, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <ETH_MACAddressConfig+0x68>)
 800249e:	4413      	add	r3, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3303      	adds	r3, #3
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	061a      	lsls	r2, r3, #24
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3302      	adds	r3, #2
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	041b      	lsls	r3, r3, #16
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3301      	adds	r3, #1
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	4313      	orrs	r3, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	7812      	ldrb	r2, [r2, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <ETH_MACAddressConfig+0x6c>)
 80024ce:	4413      	add	r3, r2
 80024d0:	461a      	mov	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	6013      	str	r3, [r2, #0]
}
 80024d6:	bf00      	nop
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40028040 	.word	0x40028040
 80024e8:	40028044 	.word	0x40028044

080024ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	e03e      	b.n	8002578 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68d9      	ldr	r1, [r3, #12]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	440b      	add	r3, r1
 800250a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2200      	movs	r2, #0
 8002516:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2200      	movs	r2, #0
 8002522:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	3206      	adds	r2, #6
 800252c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d80c      	bhi.n	800255c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68d9      	ldr	r1, [r3, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	461a      	mov	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	e004      	b.n	8002566 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	461a      	mov	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	3301      	adds	r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d9bd      	bls.n	80024fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002590:	611a      	str	r2, [r3, #16]
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	e046      	b.n	800263a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6919      	ldr	r1, [r3, #16]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	440b      	add	r3, r1
 80025bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2200      	movs	r2, #0
 80025c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2200      	movs	r2, #0
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80025f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	3212      	adds	r2, #18
 8002606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d80c      	bhi.n	800262a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6919      	ldr	r1, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	440b      	add	r3, r1
 8002622:	461a      	mov	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	60da      	str	r2, [r3, #12]
 8002628:	e004      	b.n	8002634 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	461a      	mov	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3301      	adds	r3, #1
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b03      	cmp	r3, #3
 800263e:	d9b5      	bls.n	80025ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800266a:	60da      	str	r2, [r3, #12]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002678:	b480      	push	{r7}
 800267a:	b089      	sub	sp, #36	; 0x24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	e175      	b.n	8002984 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002698:	2201      	movs	r2, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	f040 8164 	bne.w	800297e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d005      	beq.n	80026ce <HAL_GPIO_Init+0x56>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d130      	bne.n	8002730 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	2203      	movs	r2, #3
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002704:	2201      	movs	r2, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 0201 	and.w	r2, r3, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	2b03      	cmp	r3, #3
 800273a:	d017      	beq.n	800276c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d123      	bne.n	80027c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	08da      	lsrs	r2, r3, #3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3208      	adds	r2, #8
 8002780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	220f      	movs	r2, #15
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	08da      	lsrs	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3208      	adds	r2, #8
 80027ba:	69b9      	ldr	r1, [r7, #24]
 80027bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0203 	and.w	r2, r3, #3
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80be 	beq.w	800297e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002802:	4b66      	ldr	r3, [pc, #408]	; (800299c <HAL_GPIO_Init+0x324>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	4a65      	ldr	r2, [pc, #404]	; (800299c <HAL_GPIO_Init+0x324>)
 8002808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800280c:	6453      	str	r3, [r2, #68]	; 0x44
 800280e:	4b63      	ldr	r3, [pc, #396]	; (800299c <HAL_GPIO_Init+0x324>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800281a:	4a61      	ldr	r2, [pc, #388]	; (80029a0 <HAL_GPIO_Init+0x328>)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	3302      	adds	r3, #2
 8002822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	220f      	movs	r2, #15
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a58      	ldr	r2, [pc, #352]	; (80029a4 <HAL_GPIO_Init+0x32c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d037      	beq.n	80028b6 <HAL_GPIO_Init+0x23e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a57      	ldr	r2, [pc, #348]	; (80029a8 <HAL_GPIO_Init+0x330>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d031      	beq.n	80028b2 <HAL_GPIO_Init+0x23a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a56      	ldr	r2, [pc, #344]	; (80029ac <HAL_GPIO_Init+0x334>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d02b      	beq.n	80028ae <HAL_GPIO_Init+0x236>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a55      	ldr	r2, [pc, #340]	; (80029b0 <HAL_GPIO_Init+0x338>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d025      	beq.n	80028aa <HAL_GPIO_Init+0x232>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a54      	ldr	r2, [pc, #336]	; (80029b4 <HAL_GPIO_Init+0x33c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01f      	beq.n	80028a6 <HAL_GPIO_Init+0x22e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a53      	ldr	r2, [pc, #332]	; (80029b8 <HAL_GPIO_Init+0x340>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d019      	beq.n	80028a2 <HAL_GPIO_Init+0x22a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_GPIO_Init+0x344>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <HAL_GPIO_Init+0x226>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a51      	ldr	r2, [pc, #324]	; (80029c0 <HAL_GPIO_Init+0x348>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00d      	beq.n	800289a <HAL_GPIO_Init+0x222>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a50      	ldr	r2, [pc, #320]	; (80029c4 <HAL_GPIO_Init+0x34c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d007      	beq.n	8002896 <HAL_GPIO_Init+0x21e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4f      	ldr	r2, [pc, #316]	; (80029c8 <HAL_GPIO_Init+0x350>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d101      	bne.n	8002892 <HAL_GPIO_Init+0x21a>
 800288e:	2309      	movs	r3, #9
 8002890:	e012      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 8002892:	230a      	movs	r3, #10
 8002894:	e010      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 8002896:	2308      	movs	r3, #8
 8002898:	e00e      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 800289a:	2307      	movs	r3, #7
 800289c:	e00c      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 800289e:	2306      	movs	r3, #6
 80028a0:	e00a      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028a2:	2305      	movs	r3, #5
 80028a4:	e008      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028a6:	2304      	movs	r3, #4
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e004      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028b6:	2300      	movs	r3, #0
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f002 0203 	and.w	r2, r2, #3
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	4093      	lsls	r3, r2
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028c8:	4935      	ldr	r1, [pc, #212]	; (80029a0 <HAL_GPIO_Init+0x328>)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d6:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <HAL_GPIO_Init+0x354>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fa:	4a34      	ldr	r2, [pc, #208]	; (80029cc <HAL_GPIO_Init+0x354>)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002900:	4b32      	ldr	r3, [pc, #200]	; (80029cc <HAL_GPIO_Init+0x354>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002924:	4a29      	ldr	r2, [pc, #164]	; (80029cc <HAL_GPIO_Init+0x354>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800292a:	4b28      	ldr	r3, [pc, #160]	; (80029cc <HAL_GPIO_Init+0x354>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294e:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <HAL_GPIO_Init+0x354>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_GPIO_Init+0x354>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002978:	4a14      	ldr	r2, [pc, #80]	; (80029cc <HAL_GPIO_Init+0x354>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3301      	adds	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	f67f ae86 	bls.w	8002698 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3724      	adds	r7, #36	; 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40021400 	.word	0x40021400
 80029bc:	40021800 	.word	0x40021800
 80029c0:	40021c00 	.word	0x40021c00
 80029c4:	40022000 	.word	0x40022000
 80029c8:	40022400 	.word	0x40022400
 80029cc:	40013c00 	.word	0x40013c00

080029d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
 80029dc:	4613      	mov	r3, r2
 80029de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e0:	787b      	ldrb	r3, [r7, #1]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029ec:	e003      	b.n	80029f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029ee:	887b      	ldrh	r3, [r7, #2]
 80029f0:	041a      	lsls	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	619a      	str	r2, [r3, #24]
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a04:	b08f      	sub	sp, #60	; 0x3c
 8002a06:	af0a      	add	r7, sp, #40	; 0x28
 8002a08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e116      	b.n	8002c42 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe fc6c 	bl	800130c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2203      	movs	r2, #3
 8002a38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f003 fb8c 	bl	8006170 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	603b      	str	r3, [r7, #0]
 8002a5e:	687e      	ldr	r6, [r7, #4]
 8002a60:	466d      	mov	r5, sp
 8002a62:	f106 0410 	add.w	r4, r6, #16
 8002a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a72:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a76:	1d33      	adds	r3, r6, #4
 8002a78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7a:	6838      	ldr	r0, [r7, #0]
 8002a7c:	f003 fb20 	bl	80060c0 <USB_CoreInit>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0d7      	b.n	8002c42 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 fb7a 	bl	8006192 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	e04a      	b.n	8002b3a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	333d      	adds	r3, #61	; 0x3d
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	333c      	adds	r3, #60	; 0x3c
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	b298      	uxth	r0, r3
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	3344      	adds	r3, #68	; 0x44
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ae4:	7bfa      	ldrb	r2, [r7, #15]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	3340      	adds	r3, #64	; 0x40
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	3348      	adds	r3, #72	; 0x48
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	334c      	adds	r3, #76	; 0x4c
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	3354      	adds	r3, #84	; 0x54
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	3301      	adds	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d3af      	bcc.n	8002aa4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]
 8002b48:	e044      	b.n	8002bd4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d3b5      	bcc.n	8002b4a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	687e      	ldr	r6, [r7, #4]
 8002be6:	466d      	mov	r5, sp
 8002be8:	f106 0410 	add.w	r4, r6, #16
 8002bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bf8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bfc:	1d33      	adds	r3, r6, #4
 8002bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c00:	6838      	ldr	r0, [r7, #0]
 8002c02:	f003 fb13 	bl	800622c <USB_DevInit>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e014      	b.n	8002c42 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d102      	bne.n	8002c36 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f80b 	bl	8002c4c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f003 fcd1 	bl	80065e2 <USB_DevDisconnect>

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c7a:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	10000003 	.word	0x10000003

08002c94 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca2:	6013      	str	r3, [r2, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40007000 	.word	0x40007000

08002cb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cbe:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4a22      	ldr	r2, [pc, #136]	; (8002d4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cca:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cd6:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce2:	f7fe fc57 	bl	8001594 <HAL_GetTick>
 8002ce6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ce8:	e009      	b.n	8002cfe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cea:	f7fe fc53 	bl	8001594 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cf8:	d901      	bls.n	8002cfe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e022      	b.n	8002d44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cfe:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0a:	d1ee      	bne.n	8002cea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d0c:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0f      	ldr	r2, [pc, #60]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d18:	f7fe fc3c 	bl	8001594 <HAL_GetTick>
 8002d1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d1e:	e009      	b.n	8002d34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d20:	f7fe fc38 	bl	8001594 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d2e:	d901      	bls.n	8002d34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e007      	b.n	8002d44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d40:	d1ee      	bne.n	8002d20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40007000 	.word	0x40007000

08002d54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e29b      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8087 	beq.w	8002e86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d78:	4b96      	ldr	r3, [pc, #600]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d00c      	beq.n	8002d9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d84:	4b93      	ldr	r3, [pc, #588]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d112      	bne.n	8002db6 <HAL_RCC_OscConfig+0x62>
 8002d90:	4b90      	ldr	r3, [pc, #576]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9c:	d10b      	bne.n	8002db6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9e:	4b8d      	ldr	r3, [pc, #564]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d06c      	beq.n	8002e84 <HAL_RCC_OscConfig+0x130>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d168      	bne.n	8002e84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e275      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dbe:	d106      	bne.n	8002dce <HAL_RCC_OscConfig+0x7a>
 8002dc0:	4b84      	ldr	r3, [pc, #528]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a83      	ldr	r2, [pc, #524]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	e02e      	b.n	8002e2c <HAL_RCC_OscConfig+0xd8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x9c>
 8002dd6:	4b7f      	ldr	r3, [pc, #508]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a7e      	ldr	r2, [pc, #504]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b7c      	ldr	r3, [pc, #496]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a7b      	ldr	r2, [pc, #492]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e01d      	b.n	8002e2c <HAL_RCC_OscConfig+0xd8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCC_OscConfig+0xc0>
 8002dfa:	4b76      	ldr	r3, [pc, #472]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a75      	ldr	r2, [pc, #468]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	4b73      	ldr	r3, [pc, #460]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a72      	ldr	r2, [pc, #456]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e00b      	b.n	8002e2c <HAL_RCC_OscConfig+0xd8>
 8002e14:	4b6f      	ldr	r3, [pc, #444]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6e      	ldr	r2, [pc, #440]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	4b6c      	ldr	r3, [pc, #432]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a6b      	ldr	r2, [pc, #428]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d013      	beq.n	8002e5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe fbae 	bl	8001594 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e3c:	f7fe fbaa 	bl	8001594 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	; 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e229      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	4b61      	ldr	r3, [pc, #388]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0xe8>
 8002e5a:	e014      	b.n	8002e86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fb9a 	bl	8001594 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e64:	f7fe fb96 	bl	8001594 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	; 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e215      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e76:	4b57      	ldr	r3, [pc, #348]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x110>
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d069      	beq.n	8002f66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e92:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9e:	4b4d      	ldr	r3, [pc, #308]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d11c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x190>
 8002eaa:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d116      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb6:	4b47      	ldr	r3, [pc, #284]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_RCC_OscConfig+0x17a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d001      	beq.n	8002ece <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e1e9      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ece:	4b41      	ldr	r3, [pc, #260]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	493d      	ldr	r1, [pc, #244]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee2:	e040      	b.n	8002f66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d023      	beq.n	8002f34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eec:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a38      	ldr	r2, [pc, #224]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fb4c 	bl	8001594 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f00:	f7fe fb48 	bl	8001594 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e1c7      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f12:	4b30      	ldr	r3, [pc, #192]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1e:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4929      	ldr	r1, [pc, #164]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]
 8002f32:	e018      	b.n	8002f66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f34:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe fb28 	bl	8001594 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f48:	f7fe fb24 	bl	8001594 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e1a3      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d038      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d019      	beq.n	8002fae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7e:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f86:	f7fe fb05 	bl	8001594 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fb01 	bl	8001594 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e180      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x23a>
 8002fac:	e01a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb2:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <HAL_RCC_OscConfig+0x280>)
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fba:	f7fe faeb 	bl	8001594 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc2:	f7fe fae7 	bl	8001594 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d903      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e166      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
 8002fd4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd8:	4b92      	ldr	r3, [pc, #584]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8002fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ee      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80a4 	beq.w	800313a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff2:	4b8c      	ldr	r3, [pc, #560]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10d      	bne.n	800301a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	4b89      	ldr	r3, [pc, #548]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a88      	ldr	r2, [pc, #544]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
 800300a:	4b86      	ldr	r3, [pc, #536]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003016:	2301      	movs	r3, #1
 8003018:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301a:	4b83      	ldr	r3, [pc, #524]	; (8003228 <HAL_RCC_OscConfig+0x4d4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d118      	bne.n	8003058 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003026:	4b80      	ldr	r3, [pc, #512]	; (8003228 <HAL_RCC_OscConfig+0x4d4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a7f      	ldr	r2, [pc, #508]	; (8003228 <HAL_RCC_OscConfig+0x4d4>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003032:	f7fe faaf 	bl	8001594 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303a:	f7fe faab 	bl	8001594 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b64      	cmp	r3, #100	; 0x64
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e12a      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800304c:	4b76      	ldr	r3, [pc, #472]	; (8003228 <HAL_RCC_OscConfig+0x4d4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x31a>
 8003060:	4b70      	ldr	r3, [pc, #448]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003064:	4a6f      	ldr	r2, [pc, #444]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6713      	str	r3, [r2, #112]	; 0x70
 800306c:	e02d      	b.n	80030ca <HAL_RCC_OscConfig+0x376>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10c      	bne.n	8003090 <HAL_RCC_OscConfig+0x33c>
 8003076:	4b6b      	ldr	r3, [pc, #428]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	4a6a      	ldr	r2, [pc, #424]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	6713      	str	r3, [r2, #112]	; 0x70
 8003082:	4b68      	ldr	r3, [pc, #416]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	4a67      	ldr	r2, [pc, #412]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003088:	f023 0304 	bic.w	r3, r3, #4
 800308c:	6713      	str	r3, [r2, #112]	; 0x70
 800308e:	e01c      	b.n	80030ca <HAL_RCC_OscConfig+0x376>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b05      	cmp	r3, #5
 8003096:	d10c      	bne.n	80030b2 <HAL_RCC_OscConfig+0x35e>
 8003098:	4b62      	ldr	r3, [pc, #392]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	4a61      	ldr	r2, [pc, #388]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	6713      	str	r3, [r2, #112]	; 0x70
 80030a4:	4b5f      	ldr	r3, [pc, #380]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	4a5e      	ldr	r2, [pc, #376]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	6713      	str	r3, [r2, #112]	; 0x70
 80030b0:	e00b      	b.n	80030ca <HAL_RCC_OscConfig+0x376>
 80030b2:	4b5c      	ldr	r3, [pc, #368]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80030b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b6:	4a5b      	ldr	r2, [pc, #364]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80030b8:	f023 0301 	bic.w	r3, r3, #1
 80030bc:	6713      	str	r3, [r2, #112]	; 0x70
 80030be:	4b59      	ldr	r3, [pc, #356]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c2:	4a58      	ldr	r2, [pc, #352]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80030c4:	f023 0304 	bic.w	r3, r3, #4
 80030c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d015      	beq.n	80030fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d2:	f7fe fa5f 	bl	8001594 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fe fa5b 	bl	8001594 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e0d8      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f0:	4b4c      	ldr	r3, [pc, #304]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80030f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0ee      	beq.n	80030da <HAL_RCC_OscConfig+0x386>
 80030fc:	e014      	b.n	8003128 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fe:	f7fe fa49 	bl	8001594 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003104:	e00a      	b.n	800311c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7fe fa45 	bl	8001594 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	; 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e0c2      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311c:	4b41      	ldr	r3, [pc, #260]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1ee      	bne.n	8003106 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d105      	bne.n	800313a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800312e:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	4a3c      	ldr	r2, [pc, #240]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003138:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80ae 	beq.w	80032a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003144:	4b37      	ldr	r3, [pc, #220]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 030c 	and.w	r3, r3, #12
 800314c:	2b08      	cmp	r3, #8
 800314e:	d06d      	beq.n	800322c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d14b      	bne.n	80031f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003158:	4b32      	ldr	r3, [pc, #200]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a31      	ldr	r2, [pc, #196]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 800315e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fa16 	bl	8001594 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe fa12 	bl	8001594 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e091      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317e:	4b29      	ldr	r3, [pc, #164]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	019b      	lsls	r3, r3, #6
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	3b01      	subs	r3, #1
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	061b      	lsls	r3, r3, #24
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	071b      	lsls	r3, r3, #28
 80031b6:	491b      	ldr	r1, [pc, #108]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a18      	ldr	r2, [pc, #96]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80031c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe f9e4 	bl	8001594 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fe f9e0 	bl	8001594 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e05f      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e2:	4b10      	ldr	r3, [pc, #64]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x47c>
 80031ee:	e057      	b.n	80032a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0b      	ldr	r2, [pc, #44]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 80031f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe f9ca 	bl	8001594 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003204:	f7fe f9c6 	bl	8001594 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e045      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	4b03      	ldr	r3, [pc, #12]	; (8003224 <HAL_RCC_OscConfig+0x4d0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x4b0>
 8003222:	e03d      	b.n	80032a0 <HAL_RCC_OscConfig+0x54c>
 8003224:	40023800 	.word	0x40023800
 8003228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800322c:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <HAL_RCC_OscConfig+0x558>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d030      	beq.n	800329c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d129      	bne.n	800329c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d122      	bne.n	800329c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800325c:	4013      	ands	r3, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003262:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003264:	4293      	cmp	r3, r2
 8003266:	d119      	bne.n	800329c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	3b01      	subs	r3, #1
 8003276:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d10f      	bne.n	800329c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d107      	bne.n	800329c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800

080032b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0d0      	b.n	800346a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c8:	4b6a      	ldr	r3, [pc, #424]	; (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d910      	bls.n	80032f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b67      	ldr	r3, [pc, #412]	; (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 020f 	bic.w	r2, r3, #15
 80032de:	4965      	ldr	r1, [pc, #404]	; (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b63      	ldr	r3, [pc, #396]	; (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0b8      	b.n	800346a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d020      	beq.n	8003346 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003310:	4b59      	ldr	r3, [pc, #356]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	4a58      	ldr	r2, [pc, #352]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003316:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800331a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003328:	4b53      	ldr	r3, [pc, #332]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	4a52      	ldr	r2, [pc, #328]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 800332e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003332:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003334:	4b50      	ldr	r3, [pc, #320]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	494d      	ldr	r1, [pc, #308]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d040      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	4b47      	ldr	r3, [pc, #284]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d115      	bne.n	8003392 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e07f      	b.n	800346a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003372:	4b41      	ldr	r3, [pc, #260]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e073      	b.n	800346a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003382:	4b3d      	ldr	r3, [pc, #244]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e06b      	b.n	800346a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003392:	4b39      	ldr	r3, [pc, #228]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f023 0203 	bic.w	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4936      	ldr	r1, [pc, #216]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a4:	f7fe f8f6 	bl	8001594 <HAL_GetTick>
 80033a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	e00a      	b.n	80033c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ac:	f7fe f8f2 	bl	8001594 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e053      	b.n	800346a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c2:	4b2d      	ldr	r3, [pc, #180]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 020c 	and.w	r2, r3, #12
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d1eb      	bne.n	80033ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033d4:	4b27      	ldr	r3, [pc, #156]	; (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d210      	bcs.n	8003404 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b24      	ldr	r3, [pc, #144]	; (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 020f 	bic.w	r2, r3, #15
 80033ea:	4922      	ldr	r1, [pc, #136]	; (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f2:	4b20      	ldr	r3, [pc, #128]	; (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e032      	b.n	800346a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003410:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4916      	ldr	r1, [pc, #88]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800342e:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	490e      	ldr	r1, [pc, #56]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 800343e:	4313      	orrs	r3, r2
 8003440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003442:	f000 f821 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 8003446:	4602      	mov	r2, r0
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	490a      	ldr	r1, [pc, #40]	; (800347c <HAL_RCC_ClockConfig+0x1cc>)
 8003454:	5ccb      	ldrb	r3, [r1, r3]
 8003456:	fa22 f303 	lsr.w	r3, r2, r3
 800345a:	4a09      	ldr	r2, [pc, #36]	; (8003480 <HAL_RCC_ClockConfig+0x1d0>)
 800345c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <HAL_RCC_ClockConfig+0x1d4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe f852 	bl	800150c <HAL_InitTick>

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40023c00 	.word	0x40023c00
 8003478:	40023800 	.word	0x40023800
 800347c:	08006834 	.word	0x08006834
 8003480:	20000000 	.word	0x20000000
 8003484:	20000004 	.word	0x20000004

08003488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800348c:	b094      	sub	sp, #80	; 0x50
 800348e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	647b      	str	r3, [r7, #68]	; 0x44
 8003494:	2300      	movs	r3, #0
 8003496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003498:	2300      	movs	r3, #0
 800349a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034a0:	4b79      	ldr	r3, [pc, #484]	; (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d00d      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x40>
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	f200 80e1 	bhi.w	8003674 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x34>
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d003      	beq.n	80034c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ba:	e0db      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4b73      	ldr	r3, [pc, #460]	; (800368c <HAL_RCC_GetSysClockFreq+0x204>)
 80034be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034c0:	e0db      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034c2:	4b73      	ldr	r3, [pc, #460]	; (8003690 <HAL_RCC_GetSysClockFreq+0x208>)
 80034c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034c6:	e0d8      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c8:	4b6f      	ldr	r3, [pc, #444]	; (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034d0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034d2:	4b6d      	ldr	r3, [pc, #436]	; (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d063      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034de:	4b6a      	ldr	r3, [pc, #424]	; (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	099b      	lsrs	r3, r3, #6
 80034e4:	2200      	movs	r2, #0
 80034e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f0:	633b      	str	r3, [r7, #48]	; 0x30
 80034f2:	2300      	movs	r3, #0
 80034f4:	637b      	str	r3, [r7, #52]	; 0x34
 80034f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034fa:	4622      	mov	r2, r4
 80034fc:	462b      	mov	r3, r5
 80034fe:	f04f 0000 	mov.w	r0, #0
 8003502:	f04f 0100 	mov.w	r1, #0
 8003506:	0159      	lsls	r1, r3, #5
 8003508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350c:	0150      	lsls	r0, r2, #5
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4621      	mov	r1, r4
 8003514:	1a51      	subs	r1, r2, r1
 8003516:	6139      	str	r1, [r7, #16]
 8003518:	4629      	mov	r1, r5
 800351a:	eb63 0301 	sbc.w	r3, r3, r1
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800352c:	4659      	mov	r1, fp
 800352e:	018b      	lsls	r3, r1, #6
 8003530:	4651      	mov	r1, sl
 8003532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003536:	4651      	mov	r1, sl
 8003538:	018a      	lsls	r2, r1, #6
 800353a:	4651      	mov	r1, sl
 800353c:	ebb2 0801 	subs.w	r8, r2, r1
 8003540:	4659      	mov	r1, fp
 8003542:	eb63 0901 	sbc.w	r9, r3, r1
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800355a:	4690      	mov	r8, r2
 800355c:	4699      	mov	r9, r3
 800355e:	4623      	mov	r3, r4
 8003560:	eb18 0303 	adds.w	r3, r8, r3
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	462b      	mov	r3, r5
 8003568:	eb49 0303 	adc.w	r3, r9, r3
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800357a:	4629      	mov	r1, r5
 800357c:	024b      	lsls	r3, r1, #9
 800357e:	4621      	mov	r1, r4
 8003580:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003584:	4621      	mov	r1, r4
 8003586:	024a      	lsls	r2, r1, #9
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800358e:	2200      	movs	r2, #0
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
 8003592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003594:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003598:	f7fc fe4e 	bl	8000238 <__aeabi_uldivmod>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4613      	mov	r3, r2
 80035a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a4:	e058      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a6:	4b38      	ldr	r3, [pc, #224]	; (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	099b      	lsrs	r3, r3, #6
 80035ac:	2200      	movs	r2, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	4611      	mov	r1, r2
 80035b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035b6:	623b      	str	r3, [r7, #32]
 80035b8:	2300      	movs	r3, #0
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
 80035bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035c0:	4642      	mov	r2, r8
 80035c2:	464b      	mov	r3, r9
 80035c4:	f04f 0000 	mov.w	r0, #0
 80035c8:	f04f 0100 	mov.w	r1, #0
 80035cc:	0159      	lsls	r1, r3, #5
 80035ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d2:	0150      	lsls	r0, r2, #5
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4641      	mov	r1, r8
 80035da:	ebb2 0a01 	subs.w	sl, r2, r1
 80035de:	4649      	mov	r1, r9
 80035e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035f8:	ebb2 040a 	subs.w	r4, r2, sl
 80035fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	00eb      	lsls	r3, r5, #3
 800360a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800360e:	00e2      	lsls	r2, r4, #3
 8003610:	4614      	mov	r4, r2
 8003612:	461d      	mov	r5, r3
 8003614:	4643      	mov	r3, r8
 8003616:	18e3      	adds	r3, r4, r3
 8003618:	603b      	str	r3, [r7, #0]
 800361a:	464b      	mov	r3, r9
 800361c:	eb45 0303 	adc.w	r3, r5, r3
 8003620:	607b      	str	r3, [r7, #4]
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800362e:	4629      	mov	r1, r5
 8003630:	028b      	lsls	r3, r1, #10
 8003632:	4621      	mov	r1, r4
 8003634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003638:	4621      	mov	r1, r4
 800363a:	028a      	lsls	r2, r1, #10
 800363c:	4610      	mov	r0, r2
 800363e:	4619      	mov	r1, r3
 8003640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003642:	2200      	movs	r2, #0
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	61fa      	str	r2, [r7, #28]
 8003648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800364c:	f7fc fdf4 	bl	8000238 <__aeabi_uldivmod>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4613      	mov	r3, r2
 8003656:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	3301      	adds	r3, #1
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003668:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800366a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003672:	e002      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_RCC_GetSysClockFreq+0x204>)
 8003676:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800367a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800367c:	4618      	mov	r0, r3
 800367e:	3750      	adds	r7, #80	; 0x50
 8003680:	46bd      	mov	sp, r7
 8003682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003686:	bf00      	nop
 8003688:	40023800 	.word	0x40023800
 800368c:	00f42400 	.word	0x00f42400
 8003690:	007a1200 	.word	0x007a1200

08003694 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000000 	.word	0x20000000

080036ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036b0:	f7ff fff0 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	0a9b      	lsrs	r3, r3, #10
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4903      	ldr	r1, [pc, #12]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40023800 	.word	0x40023800
 80036d0:	08006844 	.word	0x08006844

080036d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036d8:	f7ff ffdc 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	0b5b      	lsrs	r3, r3, #13
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	4903      	ldr	r1, [pc, #12]	; (80036f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ea:	5ccb      	ldrb	r3, [r1, r3]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40023800 	.word	0x40023800
 80036f8:	08006844 	.word	0x08006844

080036fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d012      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003724:	4b69      	ldr	r3, [pc, #420]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a68      	ldr	r2, [pc, #416]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800372e:	6093      	str	r3, [r2, #8]
 8003730:	4b66      	ldr	r3, [pc, #408]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003738:	4964      	ldr	r1, [pc, #400]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003746:	2301      	movs	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d017      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003756:	4b5d      	ldr	r3, [pc, #372]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800375c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003764:	4959      	ldr	r1, [pc, #356]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003774:	d101      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003776:	2301      	movs	r3, #1
 8003778:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003782:	2301      	movs	r3, #1
 8003784:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d017      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003792:	4b4e      	ldr	r3, [pc, #312]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003798:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	494a      	ldr	r1, [pc, #296]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b0:	d101      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80037b2:	2301      	movs	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037be:	2301      	movs	r3, #1
 80037c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037ce:	2301      	movs	r3, #1
 80037d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 808b 	beq.w	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037e0:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	4a39      	ldr	r2, [pc, #228]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6413      	str	r3, [r2, #64]	; 0x40
 80037ec:	4b37      	ldr	r3, [pc, #220]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037f8:	4b35      	ldr	r3, [pc, #212]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a34      	ldr	r2, [pc, #208]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003804:	f7fd fec6 	bl	8001594 <HAL_GetTick>
 8003808:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380c:	f7fd fec2 	bl	8001594 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e38f      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800381e:	4b2c      	ldr	r3, [pc, #176]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800382a:	4b28      	ldr	r3, [pc, #160]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003832:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d035      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	429a      	cmp	r2, r3
 8003846:	d02e      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003848:	4b20      	ldr	r3, [pc, #128]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003850:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003852:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	4a1d      	ldr	r2, [pc, #116]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003862:	4a1a      	ldr	r2, [pc, #104]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003868:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800386a:	4a18      	ldr	r2, [pc, #96]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003870:	4b16      	ldr	r3, [pc, #88]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d114      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fd fe8a 	bl	8001594 <HAL_GetTick>
 8003880:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003882:	e00a      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003884:	f7fd fe86 	bl	8001594 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e351      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0ee      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038b2:	d111      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038c2:	400b      	ands	r3, r1
 80038c4:	4901      	ldr	r1, [pc, #4]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
 80038ca:	e00b      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40007000 	.word	0x40007000
 80038d4:	0ffffcff 	.word	0x0ffffcff
 80038d8:	4bac      	ldr	r3, [pc, #688]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4aab      	ldr	r2, [pc, #684]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038e2:	6093      	str	r3, [r2, #8]
 80038e4:	4ba9      	ldr	r3, [pc, #676]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f0:	49a6      	ldr	r1, [pc, #664]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d010      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003902:	4ba2      	ldr	r3, [pc, #648]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003908:	4aa0      	ldr	r2, [pc, #640]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800390e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003912:	4b9e      	ldr	r3, [pc, #632]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003914:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	499b      	ldr	r1, [pc, #620]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003930:	4b96      	ldr	r3, [pc, #600]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800393e:	4993      	ldr	r1, [pc, #588]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003952:	4b8e      	ldr	r3, [pc, #568]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003958:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003960:	498a      	ldr	r1, [pc, #552]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003974:	4b85      	ldr	r3, [pc, #532]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003982:	4982      	ldr	r1, [pc, #520]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003996:	4b7d      	ldr	r3, [pc, #500]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a4:	4979      	ldr	r1, [pc, #484]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039b8:	4b74      	ldr	r3, [pc, #464]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039be:	f023 0203 	bic.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	4971      	ldr	r1, [pc, #452]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039da:	4b6c      	ldr	r3, [pc, #432]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e0:	f023 020c 	bic.w	r2, r3, #12
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e8:	4968      	ldr	r1, [pc, #416]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039fc:	4b63      	ldr	r3, [pc, #396]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0a:	4960      	ldr	r1, [pc, #384]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a1e:	4b5b      	ldr	r3, [pc, #364]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2c:	4957      	ldr	r1, [pc, #348]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00a      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a40:	4b52      	ldr	r3, [pc, #328]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4e:	494f      	ldr	r1, [pc, #316]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a62:	4b4a      	ldr	r3, [pc, #296]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a70:	4946      	ldr	r1, [pc, #280]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a84:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	493e      	ldr	r1, [pc, #248]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003aa6:	4b39      	ldr	r3, [pc, #228]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab4:	4935      	ldr	r1, [pc, #212]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ac8:	4b30      	ldr	r3, [pc, #192]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad6:	492d      	ldr	r1, [pc, #180]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d011      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003aea:	4b28      	ldr	r3, [pc, #160]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003af8:	4924      	ldr	r1, [pc, #144]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b08:	d101      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b2a:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b30:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b38:	4914      	ldr	r1, [pc, #80]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b5c:	490b      	ldr	r1, [pc, #44]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00f      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b80:	4902      	ldr	r1, [pc, #8]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b88:	e002      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b9c:	4b8a      	ldr	r3, [pc, #552]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	4986      	ldr	r1, [pc, #536]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00b      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003bc0:	4b81      	ldr	r3, [pc, #516]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd0:	497d      	ldr	r1, [pc, #500]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d006      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80d6 	beq.w	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bec:	4b76      	ldr	r3, [pc, #472]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a75      	ldr	r2, [pc, #468]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf8:	f7fd fccc 	bl	8001594 <HAL_GetTick>
 8003bfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c00:	f7fd fcc8 	bl	8001594 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	; 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e195      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c12:	4b6d      	ldr	r3, [pc, #436]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d021      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d11d      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c32:	4b65      	ldr	r3, [pc, #404]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c38:	0c1b      	lsrs	r3, r3, #16
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c40:	4b61      	ldr	r3, [pc, #388]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c46:	0e1b      	lsrs	r3, r3, #24
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	019a      	lsls	r2, r3, #6
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	041b      	lsls	r3, r3, #16
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	071b      	lsls	r3, r3, #28
 8003c66:	4958      	ldr	r1, [pc, #352]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c82:	d00a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02e      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c98:	d129      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c9a:	4b4b      	ldr	r3, [pc, #300]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca0:	0c1b      	lsrs	r3, r3, #16
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ca8:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cae:	0f1b      	lsrs	r3, r3, #28
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	019a      	lsls	r2, r3, #6
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	061b      	lsls	r3, r3, #24
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	071b      	lsls	r3, r3, #28
 8003cce:	493e      	ldr	r1, [pc, #248]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cd6:	4b3c      	ldr	r3, [pc, #240]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cdc:	f023 021f 	bic.w	r2, r3, #31
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	4938      	ldr	r1, [pc, #224]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d01d      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cfa:	4b33      	ldr	r3, [pc, #204]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d00:	0e1b      	lsrs	r3, r3, #24
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d08:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d0e:	0f1b      	lsrs	r3, r3, #28
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	019a      	lsls	r2, r3, #6
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	041b      	lsls	r3, r3, #16
 8003d22:	431a      	orrs	r2, r3
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	061b      	lsls	r3, r3, #24
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	071b      	lsls	r3, r3, #28
 8003d2e:	4926      	ldr	r1, [pc, #152]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d011      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	019a      	lsls	r2, r3, #6
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	041b      	lsls	r3, r3, #16
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	061b      	lsls	r3, r3, #24
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	071b      	lsls	r3, r3, #28
 8003d5e:	491a      	ldr	r1, [pc, #104]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d66:	4b18      	ldr	r3, [pc, #96]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a17      	ldr	r2, [pc, #92]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d72:	f7fd fc0f 	bl	8001594 <HAL_GetTick>
 8003d76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d78:	e008      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d7a:	f7fd fc0b 	bl	8001594 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b64      	cmp	r3, #100	; 0x64
 8003d86:	d901      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e0d8      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	f040 80ce 	bne.w	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003da0:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dac:	f7fd fbf2 	bl	8001594 <HAL_GetTick>
 8003db0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003db2:	e00b      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003db4:	f7fd fbee 	bl	8001594 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b64      	cmp	r3, #100	; 0x64
 8003dc0:	d904      	bls.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0bb      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dcc:	4b5e      	ldr	r3, [pc, #376]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dd8:	d0ec      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d02e      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d12a      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e02:	4b51      	ldr	r3, [pc, #324]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e10:	4b4d      	ldr	r3, [pc, #308]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	0f1b      	lsrs	r3, r3, #28
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	019a      	lsls	r2, r3, #6
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	041b      	lsls	r3, r3, #16
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	061b      	lsls	r3, r3, #24
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	071b      	lsls	r3, r3, #28
 8003e36:	4944      	ldr	r1, [pc, #272]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e3e:	4b42      	ldr	r3, [pc, #264]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	493d      	ldr	r1, [pc, #244]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d022      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e6c:	d11d      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e6e:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e74:	0e1b      	lsrs	r3, r3, #24
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e7c:	4b32      	ldr	r3, [pc, #200]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	0f1b      	lsrs	r3, r3, #28
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	019a      	lsls	r2, r3, #6
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	041b      	lsls	r3, r3, #16
 8003e96:	431a      	orrs	r2, r3
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	061b      	lsls	r3, r3, #24
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	071b      	lsls	r3, r3, #28
 8003ea2:	4929      	ldr	r1, [pc, #164]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d028      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebc:	0e1b      	lsrs	r3, r3, #24
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ec4:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eca:	0c1b      	lsrs	r3, r3, #16
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	019a      	lsls	r2, r3, #6
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	041b      	lsls	r3, r3, #16
 8003edc:	431a      	orrs	r2, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	071b      	lsls	r3, r3, #28
 8003eea:	4917      	ldr	r1, [pc, #92]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ef2:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	4911      	ldr	r1, [pc, #68]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f08:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f14:	f7fd fb3e 	bl	8001594 <HAL_GetTick>
 8003f18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f1c:	f7fd fb3a 	bl	8001594 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	; 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e007      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f3a:	d1ef      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800

08003f4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e049      	b.n	8003ff2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fd f870 	bl	8001058 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3304      	adds	r3, #4
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	f000 fa44 	bl	8004418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d109      	bne.n	8004020 <HAL_TIM_PWM_Start+0x24>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	e03c      	b.n	800409a <HAL_TIM_PWM_Start+0x9e>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b04      	cmp	r3, #4
 8004024:	d109      	bne.n	800403a <HAL_TIM_PWM_Start+0x3e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b01      	cmp	r3, #1
 8004030:	bf14      	ite	ne
 8004032:	2301      	movne	r3, #1
 8004034:	2300      	moveq	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	e02f      	b.n	800409a <HAL_TIM_PWM_Start+0x9e>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d109      	bne.n	8004054 <HAL_TIM_PWM_Start+0x58>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e022      	b.n	800409a <HAL_TIM_PWM_Start+0x9e>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b0c      	cmp	r3, #12
 8004058:	d109      	bne.n	800406e <HAL_TIM_PWM_Start+0x72>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b01      	cmp	r3, #1
 8004064:	bf14      	ite	ne
 8004066:	2301      	movne	r3, #1
 8004068:	2300      	moveq	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	e015      	b.n	800409a <HAL_TIM_PWM_Start+0x9e>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b10      	cmp	r3, #16
 8004072:	d109      	bne.n	8004088 <HAL_TIM_PWM_Start+0x8c>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e008      	b.n	800409a <HAL_TIM_PWM_Start+0x9e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e092      	b.n	80041c8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d104      	bne.n	80040b2 <HAL_TIM_PWM_Start+0xb6>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b0:	e023      	b.n	80040fa <HAL_TIM_PWM_Start+0xfe>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d104      	bne.n	80040c2 <HAL_TIM_PWM_Start+0xc6>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c0:	e01b      	b.n	80040fa <HAL_TIM_PWM_Start+0xfe>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d104      	bne.n	80040d2 <HAL_TIM_PWM_Start+0xd6>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d0:	e013      	b.n	80040fa <HAL_TIM_PWM_Start+0xfe>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b0c      	cmp	r3, #12
 80040d6:	d104      	bne.n	80040e2 <HAL_TIM_PWM_Start+0xe6>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040e0:	e00b      	b.n	80040fa <HAL_TIM_PWM_Start+0xfe>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d104      	bne.n	80040f2 <HAL_TIM_PWM_Start+0xf6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f0:	e003      	b.n	80040fa <HAL_TIM_PWM_Start+0xfe>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2202      	movs	r2, #2
 80040f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2201      	movs	r2, #1
 8004100:	6839      	ldr	r1, [r7, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fc86 	bl	8004a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a30      	ldr	r2, [pc, #192]	; (80041d0 <HAL_TIM_PWM_Start+0x1d4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <HAL_TIM_PWM_Start+0x120>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a2f      	ldr	r2, [pc, #188]	; (80041d4 <HAL_TIM_PWM_Start+0x1d8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d101      	bne.n	8004120 <HAL_TIM_PWM_Start+0x124>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <HAL_TIM_PWM_Start+0x126>
 8004120:	2300      	movs	r3, #0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a25      	ldr	r2, [pc, #148]	; (80041d0 <HAL_TIM_PWM_Start+0x1d4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d022      	beq.n	8004186 <HAL_TIM_PWM_Start+0x18a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004148:	d01d      	beq.n	8004186 <HAL_TIM_PWM_Start+0x18a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a22      	ldr	r2, [pc, #136]	; (80041d8 <HAL_TIM_PWM_Start+0x1dc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d018      	beq.n	8004186 <HAL_TIM_PWM_Start+0x18a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a20      	ldr	r2, [pc, #128]	; (80041dc <HAL_TIM_PWM_Start+0x1e0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <HAL_TIM_PWM_Start+0x18a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1f      	ldr	r2, [pc, #124]	; (80041e0 <HAL_TIM_PWM_Start+0x1e4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00e      	beq.n	8004186 <HAL_TIM_PWM_Start+0x18a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a19      	ldr	r2, [pc, #100]	; (80041d4 <HAL_TIM_PWM_Start+0x1d8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d009      	beq.n	8004186 <HAL_TIM_PWM_Start+0x18a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <HAL_TIM_PWM_Start+0x1e8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d004      	beq.n	8004186 <HAL_TIM_PWM_Start+0x18a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <HAL_TIM_PWM_Start+0x1ec>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d115      	bne.n	80041b2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	4b17      	ldr	r3, [pc, #92]	; (80041ec <HAL_TIM_PWM_Start+0x1f0>)
 800418e:	4013      	ands	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b06      	cmp	r3, #6
 8004196:	d015      	beq.n	80041c4 <HAL_TIM_PWM_Start+0x1c8>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419e:	d011      	beq.n	80041c4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0201 	orr.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b0:	e008      	b.n	80041c4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0201 	orr.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e000      	b.n	80041c6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40010400 	.word	0x40010400
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40000800 	.word	0x40000800
 80041e0:	40000c00 	.word	0x40000c00
 80041e4:	40014000 	.word	0x40014000
 80041e8:	40001800 	.word	0x40001800
 80041ec:	00010007 	.word	0x00010007

080041f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800420a:	2302      	movs	r3, #2
 800420c:	e0ff      	b.n	800440e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b14      	cmp	r3, #20
 800421a:	f200 80f0 	bhi.w	80043fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004279 	.word	0x08004279
 8004228:	080043ff 	.word	0x080043ff
 800422c:	080043ff 	.word	0x080043ff
 8004230:	080043ff 	.word	0x080043ff
 8004234:	080042b9 	.word	0x080042b9
 8004238:	080043ff 	.word	0x080043ff
 800423c:	080043ff 	.word	0x080043ff
 8004240:	080043ff 	.word	0x080043ff
 8004244:	080042fb 	.word	0x080042fb
 8004248:	080043ff 	.word	0x080043ff
 800424c:	080043ff 	.word	0x080043ff
 8004250:	080043ff 	.word	0x080043ff
 8004254:	0800433b 	.word	0x0800433b
 8004258:	080043ff 	.word	0x080043ff
 800425c:	080043ff 	.word	0x080043ff
 8004260:	080043ff 	.word	0x080043ff
 8004264:	0800437d 	.word	0x0800437d
 8004268:	080043ff 	.word	0x080043ff
 800426c:	080043ff 	.word	0x080043ff
 8004270:	080043ff 	.word	0x080043ff
 8004274:	080043bd 	.word	0x080043bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 f96a 	bl	8004558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0208 	orr.w	r2, r2, #8
 8004292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0204 	bic.w	r2, r2, #4
 80042a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6999      	ldr	r1, [r3, #24]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	619a      	str	r2, [r3, #24]
      break;
 80042b6:	e0a5      	b.n	8004404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68b9      	ldr	r1, [r7, #8]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 f9bc 	bl	800463c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6999      	ldr	r1, [r3, #24]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	021a      	lsls	r2, r3, #8
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	619a      	str	r2, [r3, #24]
      break;
 80042f8:	e084      	b.n	8004404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fa13 	bl	800472c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69da      	ldr	r2, [r3, #28]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0208 	orr.w	r2, r2, #8
 8004314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0204 	bic.w	r2, r2, #4
 8004324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69d9      	ldr	r1, [r3, #28]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	61da      	str	r2, [r3, #28]
      break;
 8004338:	e064      	b.n	8004404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68b9      	ldr	r1, [r7, #8]
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fa69 	bl	8004818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69d9      	ldr	r1, [r3, #28]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	021a      	lsls	r2, r3, #8
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	61da      	str	r2, [r3, #28]
      break;
 800437a:	e043      	b.n	8004404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	4618      	mov	r0, r3
 8004384:	f000 faa0 	bl	80048c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0208 	orr.w	r2, r2, #8
 8004396:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0204 	bic.w	r2, r2, #4
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80043ba:	e023      	b.n	8004404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fad2 	bl	800496c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	021a      	lsls	r2, r3, #8
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80043fc:	e002      	b.n	8004404 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	75fb      	strb	r3, [r7, #23]
      break;
 8004402:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800440c:	7dfb      	ldrb	r3, [r7, #23]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop

08004418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a40      	ldr	r2, [pc, #256]	; (800452c <TIM_Base_SetConfig+0x114>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d013      	beq.n	8004458 <TIM_Base_SetConfig+0x40>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004436:	d00f      	beq.n	8004458 <TIM_Base_SetConfig+0x40>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a3d      	ldr	r2, [pc, #244]	; (8004530 <TIM_Base_SetConfig+0x118>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00b      	beq.n	8004458 <TIM_Base_SetConfig+0x40>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a3c      	ldr	r2, [pc, #240]	; (8004534 <TIM_Base_SetConfig+0x11c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d007      	beq.n	8004458 <TIM_Base_SetConfig+0x40>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a3b      	ldr	r2, [pc, #236]	; (8004538 <TIM_Base_SetConfig+0x120>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d003      	beq.n	8004458 <TIM_Base_SetConfig+0x40>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a3a      	ldr	r2, [pc, #232]	; (800453c <TIM_Base_SetConfig+0x124>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d108      	bne.n	800446a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a2f      	ldr	r2, [pc, #188]	; (800452c <TIM_Base_SetConfig+0x114>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d02b      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004478:	d027      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a2c      	ldr	r2, [pc, #176]	; (8004530 <TIM_Base_SetConfig+0x118>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d023      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a2b      	ldr	r2, [pc, #172]	; (8004534 <TIM_Base_SetConfig+0x11c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01f      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a2a      	ldr	r2, [pc, #168]	; (8004538 <TIM_Base_SetConfig+0x120>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d01b      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a29      	ldr	r2, [pc, #164]	; (800453c <TIM_Base_SetConfig+0x124>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d017      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a28      	ldr	r2, [pc, #160]	; (8004540 <TIM_Base_SetConfig+0x128>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d013      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a27      	ldr	r2, [pc, #156]	; (8004544 <TIM_Base_SetConfig+0x12c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00f      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a26      	ldr	r2, [pc, #152]	; (8004548 <TIM_Base_SetConfig+0x130>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00b      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a25      	ldr	r2, [pc, #148]	; (800454c <TIM_Base_SetConfig+0x134>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d007      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a24      	ldr	r2, [pc, #144]	; (8004550 <TIM_Base_SetConfig+0x138>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d003      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a23      	ldr	r2, [pc, #140]	; (8004554 <TIM_Base_SetConfig+0x13c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d108      	bne.n	80044dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a0a      	ldr	r2, [pc, #40]	; (800452c <TIM_Base_SetConfig+0x114>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <TIM_Base_SetConfig+0xf8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a0c      	ldr	r2, [pc, #48]	; (800453c <TIM_Base_SetConfig+0x124>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d103      	bne.n	8004518 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	615a      	str	r2, [r3, #20]
}
 800451e:	bf00      	nop
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40010000 	.word	0x40010000
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800
 8004538:	40000c00 	.word	0x40000c00
 800453c:	40010400 	.word	0x40010400
 8004540:	40014000 	.word	0x40014000
 8004544:	40014400 	.word	0x40014400
 8004548:	40014800 	.word	0x40014800
 800454c:	40001800 	.word	0x40001800
 8004550:	40001c00 	.word	0x40001c00
 8004554:	40002000 	.word	0x40002000

08004558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	f023 0201 	bic.w	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <TIM_OC1_SetConfig+0xd8>)
 8004584:	4013      	ands	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0303 	bic.w	r3, r3, #3
 800458e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f023 0302 	bic.w	r3, r3, #2
 80045a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a21      	ldr	r2, [pc, #132]	; (8004634 <TIM_OC1_SetConfig+0xdc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <TIM_OC1_SetConfig+0x64>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a20      	ldr	r2, [pc, #128]	; (8004638 <TIM_OC1_SetConfig+0xe0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d10c      	bne.n	80045d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0308 	bic.w	r3, r3, #8
 80045c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f023 0304 	bic.w	r3, r3, #4
 80045d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a16      	ldr	r2, [pc, #88]	; (8004634 <TIM_OC1_SetConfig+0xdc>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d003      	beq.n	80045e6 <TIM_OC1_SetConfig+0x8e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a15      	ldr	r2, [pc, #84]	; (8004638 <TIM_OC1_SetConfig+0xe0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d111      	bne.n	800460a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	621a      	str	r2, [r3, #32]
}
 8004624:	bf00      	nop
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	fffeff8f 	.word	0xfffeff8f
 8004634:	40010000 	.word	0x40010000
 8004638:	40010400 	.word	0x40010400

0800463c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f023 0210 	bic.w	r2, r3, #16
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4b2e      	ldr	r3, [pc, #184]	; (8004720 <TIM_OC2_SetConfig+0xe4>)
 8004668:	4013      	ands	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f023 0320 	bic.w	r3, r3, #32
 8004686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a23      	ldr	r2, [pc, #140]	; (8004724 <TIM_OC2_SetConfig+0xe8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d003      	beq.n	80046a4 <TIM_OC2_SetConfig+0x68>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a22      	ldr	r2, [pc, #136]	; (8004728 <TIM_OC2_SetConfig+0xec>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d10d      	bne.n	80046c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a18      	ldr	r2, [pc, #96]	; (8004724 <TIM_OC2_SetConfig+0xe8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d003      	beq.n	80046d0 <TIM_OC2_SetConfig+0x94>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a17      	ldr	r2, [pc, #92]	; (8004728 <TIM_OC2_SetConfig+0xec>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d113      	bne.n	80046f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	621a      	str	r2, [r3, #32]
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	feff8fff 	.word	0xfeff8fff
 8004724:	40010000 	.word	0x40010000
 8004728:	40010400 	.word	0x40010400

0800472c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4b2d      	ldr	r3, [pc, #180]	; (800480c <TIM_OC3_SetConfig+0xe0>)
 8004758:	4013      	ands	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0303 	bic.w	r3, r3, #3
 8004762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a22      	ldr	r2, [pc, #136]	; (8004810 <TIM_OC3_SetConfig+0xe4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d003      	beq.n	8004792 <TIM_OC3_SetConfig+0x66>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a21      	ldr	r2, [pc, #132]	; (8004814 <TIM_OC3_SetConfig+0xe8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d10d      	bne.n	80047ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	021b      	lsls	r3, r3, #8
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a17      	ldr	r2, [pc, #92]	; (8004810 <TIM_OC3_SetConfig+0xe4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d003      	beq.n	80047be <TIM_OC3_SetConfig+0x92>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a16      	ldr	r2, [pc, #88]	; (8004814 <TIM_OC3_SetConfig+0xe8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d113      	bne.n	80047e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	621a      	str	r2, [r3, #32]
}
 8004800:	bf00      	nop
 8004802:	371c      	adds	r7, #28
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	fffeff8f 	.word	0xfffeff8f
 8004810:	40010000 	.word	0x40010000
 8004814:	40010400 	.word	0x40010400

08004818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4b1e      	ldr	r3, [pc, #120]	; (80048bc <TIM_OC4_SetConfig+0xa4>)
 8004844:	4013      	ands	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	031b      	lsls	r3, r3, #12
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a13      	ldr	r2, [pc, #76]	; (80048c0 <TIM_OC4_SetConfig+0xa8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_OC4_SetConfig+0x68>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a12      	ldr	r2, [pc, #72]	; (80048c4 <TIM_OC4_SetConfig+0xac>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d109      	bne.n	8004894 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	019b      	lsls	r3, r3, #6
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	621a      	str	r2, [r3, #32]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	feff8fff 	.word	0xfeff8fff
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40010400 	.word	0x40010400

080048c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <TIM_OC5_SetConfig+0x98>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004908:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	041b      	lsls	r3, r3, #16
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a12      	ldr	r2, [pc, #72]	; (8004964 <TIM_OC5_SetConfig+0x9c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d003      	beq.n	8004926 <TIM_OC5_SetConfig+0x5e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a11      	ldr	r2, [pc, #68]	; (8004968 <TIM_OC5_SetConfig+0xa0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d109      	bne.n	800493a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	621a      	str	r2, [r3, #32]
}
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	fffeff8f 	.word	0xfffeff8f
 8004964:	40010000 	.word	0x40010000
 8004968:	40010400 	.word	0x40010400

0800496c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <TIM_OC6_SetConfig+0x9c>)
 8004998:	4013      	ands	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	051b      	lsls	r3, r3, #20
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a13      	ldr	r2, [pc, #76]	; (8004a0c <TIM_OC6_SetConfig+0xa0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_OC6_SetConfig+0x60>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a12      	ldr	r2, [pc, #72]	; (8004a10 <TIM_OC6_SetConfig+0xa4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d109      	bne.n	80049e0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	029b      	lsls	r3, r3, #10
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	621a      	str	r2, [r3, #32]
}
 80049fa:	bf00      	nop
 80049fc:	371c      	adds	r7, #28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	feff8fff 	.word	0xfeff8fff
 8004a0c:	40010000 	.word	0x40010000
 8004a10:	40010400 	.word	0x40010400

08004a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	2201      	movs	r2, #1
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a1a      	ldr	r2, [r3, #32]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	401a      	ands	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a1a      	ldr	r2, [r3, #32]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f003 031f 	and.w	r3, r3, #31
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	621a      	str	r2, [r3, #32]
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e06d      	b.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a30      	ldr	r2, [pc, #192]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2f      	ldr	r2, [pc, #188]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d108      	bne.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ab2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a20      	ldr	r2, [pc, #128]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d022      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aea:	d01d      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d018      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1c      	ldr	r2, [pc, #112]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d013      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1a      	ldr	r2, [pc, #104]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00e      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a15      	ldr	r2, [pc, #84]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d009      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a15      	ldr	r2, [pc, #84]	; (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d10c      	bne.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	40010000 	.word	0x40010000
 8004b64:	40010400 	.word	0x40010400
 8004b68:	40000400 	.word	0x40000400
 8004b6c:	40000800 	.word	0x40000800
 8004b70:	40000c00 	.word	0x40000c00
 8004b74:	40014000 	.word	0x40014000
 8004b78:	40001800 	.word	0x40001800

08004b7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b94:	2302      	movs	r3, #2
 8004b96:	e065      	b.n	8004c64 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	041b      	lsls	r3, r3, #16
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a16      	ldr	r2, [pc, #88]	; (8004c70 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a14      	ldr	r2, [pc, #80]	; (8004c74 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d115      	bne.n	8004c52 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	051b      	lsls	r3, r3, #20
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40010000 	.word	0x40010000
 8004c74:	40010400 	.word	0x40010400

08004c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e040      	b.n	8004d0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fc fa34 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2224      	movs	r2, #36	; 0x24
 8004ca4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0201 	bic.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fb8c 	bl	80053d4 <UART_SetConfig>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e022      	b.n	8004d0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fde4 	bl	800589c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fe6b 	bl	80059e0 <UART_CheckIdleState>
 8004d0a:	4603      	mov	r3, r0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08a      	sub	sp, #40	; 0x28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d132      	bne.n	8004d92 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Receive_DMA+0x24>
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e02b      	b.n	8004d94 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d018      	beq.n	8004d82 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	623b      	str	r3, [r7, #32]
 8004d70:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	69f9      	ldr	r1, [r7, #28]
 8004d74:	6a3a      	ldr	r2, [r7, #32]
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e6      	bne.n	8004d50 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	461a      	mov	r2, r3
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 ff3d 	bl	8005c08 <UART_Start_Receive_DMA>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	e000      	b.n	8004d94 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004d92:	2302      	movs	r3, #2
  }
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3728      	adds	r7, #40	; 0x28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b0ba      	sub	sp, #232	; 0xe8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004dc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004dca:	4013      	ands	r3, r2
 8004dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004dd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d115      	bne.n	8004e04 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00f      	beq.n	8004e04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d009      	beq.n	8004e04 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 82ac 	beq.w	8005352 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	4798      	blx	r3
      }
      return;
 8004e02:	e2a6      	b.n	8005352 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 8117 	beq.w	800503c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e1e:	4b85      	ldr	r3, [pc, #532]	; (8005034 <HAL_UART_IRQHandler+0x298>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 810a 	beq.w	800503c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d011      	beq.n	8004e58 <HAL_UART_IRQHandler+0xbc>
 8004e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00b      	beq.n	8004e58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2201      	movs	r2, #1
 8004e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e4e:	f043 0201 	orr.w	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d011      	beq.n	8004e88 <HAL_UART_IRQHandler+0xec>
 8004e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00b      	beq.n	8004e88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2202      	movs	r2, #2
 8004e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e7e:	f043 0204 	orr.w	r2, r3, #4
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d011      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x11c>
 8004e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00b      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eae:	f043 0202 	orr.w	r2, r3, #2
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d017      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d105      	bne.n	8004edc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00b      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eea:	f043 0208 	orr.w	r2, r3, #8
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d012      	beq.n	8004f26 <HAL_UART_IRQHandler+0x18a>
 8004f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00c      	beq.n	8004f26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f1c:	f043 0220 	orr.w	r2, r3, #32
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 8212 	beq.w	8005356 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00d      	beq.n	8004f5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d007      	beq.n	8004f5a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6e:	2b40      	cmp	r3, #64	; 0x40
 8004f70:	d005      	beq.n	8004f7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d04f      	beq.n	800501e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 ff08 	bl	8005d94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d141      	bne.n	8005016 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3308      	adds	r3, #8
 8004f98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3308      	adds	r3, #8
 8004fba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fce:	e841 2300 	strex	r3, r2, [r1]
 8004fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1d9      	bne.n	8004f92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d013      	beq.n	800500e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fea:	4a13      	ldr	r2, [pc, #76]	; (8005038 <HAL_UART_IRQHandler+0x29c>)
 8004fec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fc fd8e 	bl	8001b14 <HAL_DMA_Abort_IT>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d017      	beq.n	800502e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005008:	4610      	mov	r0, r2
 800500a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500c:	e00f      	b.n	800502e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f9c0 	bl	8005394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005014:	e00b      	b.n	800502e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f9bc 	bl	8005394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800501c:	e007      	b.n	800502e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f9b8 	bl	8005394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800502c:	e193      	b.n	8005356 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502e:	bf00      	nop
    return;
 8005030:	e191      	b.n	8005356 <HAL_UART_IRQHandler+0x5ba>
 8005032:	bf00      	nop
 8005034:	04000120 	.word	0x04000120
 8005038:	08006041 	.word	0x08006041

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005040:	2b01      	cmp	r3, #1
 8005042:	f040 814c 	bne.w	80052de <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504a:	f003 0310 	and.w	r3, r3, #16
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 8145 	beq.w	80052de <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 813e 	beq.w	80052de <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2210      	movs	r2, #16
 8005068:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005074:	2b40      	cmp	r3, #64	; 0x40
 8005076:	f040 80b6 	bne.w	80051e6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005086:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 8165 	beq.w	800535a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800509a:	429a      	cmp	r2, r3
 800509c:	f080 815d 	bcs.w	800535a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b4:	f000 8086 	beq.w	80051c4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1da      	bne.n	80050b8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3308      	adds	r3, #8
 8005108:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005114:	f023 0301 	bic.w	r3, r3, #1
 8005118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3308      	adds	r3, #8
 8005122:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005126:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800512a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800512e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e1      	bne.n	8005102 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3308      	adds	r3, #8
 8005144:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800514e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3308      	adds	r3, #8
 800515e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005162:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005164:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005168:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e3      	bne.n	800513e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2220      	movs	r2, #32
 800517a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005194:	f023 0310 	bic.w	r3, r3, #16
 8005198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	461a      	mov	r2, r3
 80051a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80051a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e4      	bne.n	8005184 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fc fc38 	bl	8001a34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	b29b      	uxth	r3, r3
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f8e2 	bl	80053a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051e4:	e0b9      	b.n	800535a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 80ab 	beq.w	800535e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80a6 	beq.w	800535e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005222:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005226:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005234:	647b      	str	r3, [r7, #68]	; 0x44
 8005236:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800523a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e4      	bne.n	8005212 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3308      	adds	r3, #8
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	e853 3f00 	ldrex	r3, [r3]
 8005256:	623b      	str	r3, [r7, #32]
   return(result);
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	f023 0301 	bic.w	r3, r3, #1
 800525e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3308      	adds	r3, #8
 8005268:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800526c:	633a      	str	r2, [r7, #48]	; 0x30
 800526e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005270:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005274:	e841 2300 	strex	r3, r2, [r1]
 8005278:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e3      	bne.n	8005248 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f023 0310 	bic.w	r3, r3, #16
 80052a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	69b9      	ldr	r1, [r7, #24]
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	617b      	str	r3, [r7, #20]
   return(result);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e4      	bne.n	8005294 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2202      	movs	r2, #2
 80052ce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f866 	bl	80053a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052dc:	e03f      	b.n	800535e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00e      	beq.n	8005308 <HAL_UART_IRQHandler+0x56c>
 80052ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d008      	beq.n	8005308 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80052fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f85d 	bl	80053c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005306:	e02d      	b.n	8005364 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00e      	beq.n	8005332 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01c      	beq.n	8005362 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	4798      	blx	r3
    }
    return;
 8005330:	e017      	b.n	8005362 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533a:	2b00      	cmp	r3, #0
 800533c:	d012      	beq.n	8005364 <HAL_UART_IRQHandler+0x5c8>
 800533e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00c      	beq.n	8005364 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fe8e 	bl	800606c <UART_EndTransmit_IT>
    return;
 8005350:	e008      	b.n	8005364 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005352:	bf00      	nop
 8005354:	e006      	b.n	8005364 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005356:	bf00      	nop
 8005358:	e004      	b.n	8005364 <HAL_UART_IRQHandler+0x5c8>
      return;
 800535a:	bf00      	nop
 800535c:	e002      	b.n	8005364 <HAL_UART_IRQHandler+0x5c8>
      return;
 800535e:	bf00      	nop
 8005360:	e000      	b.n	8005364 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005362:	bf00      	nop
  }

}
 8005364:	37e8      	adds	r7, #232	; 0xe8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop

0800536c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4ba6      	ldr	r3, [pc, #664]	; (8005698 <UART_SetConfig+0x2c4>)
 8005400:	4013      	ands	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	6979      	ldr	r1, [r7, #20]
 8005408:	430b      	orrs	r3, r1
 800540a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	430a      	orrs	r2, r1
 8005444:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a94      	ldr	r2, [pc, #592]	; (800569c <UART_SetConfig+0x2c8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d120      	bne.n	8005492 <UART_SetConfig+0xbe>
 8005450:	4b93      	ldr	r3, [pc, #588]	; (80056a0 <UART_SetConfig+0x2cc>)
 8005452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b03      	cmp	r3, #3
 800545c:	d816      	bhi.n	800548c <UART_SetConfig+0xb8>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <UART_SetConfig+0x90>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	08005475 	.word	0x08005475
 8005468:	08005481 	.word	0x08005481
 800546c:	0800547b 	.word	0x0800547b
 8005470:	08005487 	.word	0x08005487
 8005474:	2301      	movs	r3, #1
 8005476:	77fb      	strb	r3, [r7, #31]
 8005478:	e150      	b.n	800571c <UART_SetConfig+0x348>
 800547a:	2302      	movs	r3, #2
 800547c:	77fb      	strb	r3, [r7, #31]
 800547e:	e14d      	b.n	800571c <UART_SetConfig+0x348>
 8005480:	2304      	movs	r3, #4
 8005482:	77fb      	strb	r3, [r7, #31]
 8005484:	e14a      	b.n	800571c <UART_SetConfig+0x348>
 8005486:	2308      	movs	r3, #8
 8005488:	77fb      	strb	r3, [r7, #31]
 800548a:	e147      	b.n	800571c <UART_SetConfig+0x348>
 800548c:	2310      	movs	r3, #16
 800548e:	77fb      	strb	r3, [r7, #31]
 8005490:	e144      	b.n	800571c <UART_SetConfig+0x348>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a83      	ldr	r2, [pc, #524]	; (80056a4 <UART_SetConfig+0x2d0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d132      	bne.n	8005502 <UART_SetConfig+0x12e>
 800549c:	4b80      	ldr	r3, [pc, #512]	; (80056a0 <UART_SetConfig+0x2cc>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	f003 030c 	and.w	r3, r3, #12
 80054a6:	2b0c      	cmp	r3, #12
 80054a8:	d828      	bhi.n	80054fc <UART_SetConfig+0x128>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <UART_SetConfig+0xdc>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054e5 	.word	0x080054e5
 80054b4:	080054fd 	.word	0x080054fd
 80054b8:	080054fd 	.word	0x080054fd
 80054bc:	080054fd 	.word	0x080054fd
 80054c0:	080054f1 	.word	0x080054f1
 80054c4:	080054fd 	.word	0x080054fd
 80054c8:	080054fd 	.word	0x080054fd
 80054cc:	080054fd 	.word	0x080054fd
 80054d0:	080054eb 	.word	0x080054eb
 80054d4:	080054fd 	.word	0x080054fd
 80054d8:	080054fd 	.word	0x080054fd
 80054dc:	080054fd 	.word	0x080054fd
 80054e0:	080054f7 	.word	0x080054f7
 80054e4:	2300      	movs	r3, #0
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e118      	b.n	800571c <UART_SetConfig+0x348>
 80054ea:	2302      	movs	r3, #2
 80054ec:	77fb      	strb	r3, [r7, #31]
 80054ee:	e115      	b.n	800571c <UART_SetConfig+0x348>
 80054f0:	2304      	movs	r3, #4
 80054f2:	77fb      	strb	r3, [r7, #31]
 80054f4:	e112      	b.n	800571c <UART_SetConfig+0x348>
 80054f6:	2308      	movs	r3, #8
 80054f8:	77fb      	strb	r3, [r7, #31]
 80054fa:	e10f      	b.n	800571c <UART_SetConfig+0x348>
 80054fc:	2310      	movs	r3, #16
 80054fe:	77fb      	strb	r3, [r7, #31]
 8005500:	e10c      	b.n	800571c <UART_SetConfig+0x348>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a68      	ldr	r2, [pc, #416]	; (80056a8 <UART_SetConfig+0x2d4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d120      	bne.n	800554e <UART_SetConfig+0x17a>
 800550c:	4b64      	ldr	r3, [pc, #400]	; (80056a0 <UART_SetConfig+0x2cc>)
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005512:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005516:	2b30      	cmp	r3, #48	; 0x30
 8005518:	d013      	beq.n	8005542 <UART_SetConfig+0x16e>
 800551a:	2b30      	cmp	r3, #48	; 0x30
 800551c:	d814      	bhi.n	8005548 <UART_SetConfig+0x174>
 800551e:	2b20      	cmp	r3, #32
 8005520:	d009      	beq.n	8005536 <UART_SetConfig+0x162>
 8005522:	2b20      	cmp	r3, #32
 8005524:	d810      	bhi.n	8005548 <UART_SetConfig+0x174>
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <UART_SetConfig+0x15c>
 800552a:	2b10      	cmp	r3, #16
 800552c:	d006      	beq.n	800553c <UART_SetConfig+0x168>
 800552e:	e00b      	b.n	8005548 <UART_SetConfig+0x174>
 8005530:	2300      	movs	r3, #0
 8005532:	77fb      	strb	r3, [r7, #31]
 8005534:	e0f2      	b.n	800571c <UART_SetConfig+0x348>
 8005536:	2302      	movs	r3, #2
 8005538:	77fb      	strb	r3, [r7, #31]
 800553a:	e0ef      	b.n	800571c <UART_SetConfig+0x348>
 800553c:	2304      	movs	r3, #4
 800553e:	77fb      	strb	r3, [r7, #31]
 8005540:	e0ec      	b.n	800571c <UART_SetConfig+0x348>
 8005542:	2308      	movs	r3, #8
 8005544:	77fb      	strb	r3, [r7, #31]
 8005546:	e0e9      	b.n	800571c <UART_SetConfig+0x348>
 8005548:	2310      	movs	r3, #16
 800554a:	77fb      	strb	r3, [r7, #31]
 800554c:	e0e6      	b.n	800571c <UART_SetConfig+0x348>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a56      	ldr	r2, [pc, #344]	; (80056ac <UART_SetConfig+0x2d8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d120      	bne.n	800559a <UART_SetConfig+0x1c6>
 8005558:	4b51      	ldr	r3, [pc, #324]	; (80056a0 <UART_SetConfig+0x2cc>)
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005562:	2bc0      	cmp	r3, #192	; 0xc0
 8005564:	d013      	beq.n	800558e <UART_SetConfig+0x1ba>
 8005566:	2bc0      	cmp	r3, #192	; 0xc0
 8005568:	d814      	bhi.n	8005594 <UART_SetConfig+0x1c0>
 800556a:	2b80      	cmp	r3, #128	; 0x80
 800556c:	d009      	beq.n	8005582 <UART_SetConfig+0x1ae>
 800556e:	2b80      	cmp	r3, #128	; 0x80
 8005570:	d810      	bhi.n	8005594 <UART_SetConfig+0x1c0>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <UART_SetConfig+0x1a8>
 8005576:	2b40      	cmp	r3, #64	; 0x40
 8005578:	d006      	beq.n	8005588 <UART_SetConfig+0x1b4>
 800557a:	e00b      	b.n	8005594 <UART_SetConfig+0x1c0>
 800557c:	2300      	movs	r3, #0
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e0cc      	b.n	800571c <UART_SetConfig+0x348>
 8005582:	2302      	movs	r3, #2
 8005584:	77fb      	strb	r3, [r7, #31]
 8005586:	e0c9      	b.n	800571c <UART_SetConfig+0x348>
 8005588:	2304      	movs	r3, #4
 800558a:	77fb      	strb	r3, [r7, #31]
 800558c:	e0c6      	b.n	800571c <UART_SetConfig+0x348>
 800558e:	2308      	movs	r3, #8
 8005590:	77fb      	strb	r3, [r7, #31]
 8005592:	e0c3      	b.n	800571c <UART_SetConfig+0x348>
 8005594:	2310      	movs	r3, #16
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e0c0      	b.n	800571c <UART_SetConfig+0x348>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a44      	ldr	r2, [pc, #272]	; (80056b0 <UART_SetConfig+0x2dc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d125      	bne.n	80055f0 <UART_SetConfig+0x21c>
 80055a4:	4b3e      	ldr	r3, [pc, #248]	; (80056a0 <UART_SetConfig+0x2cc>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055b2:	d017      	beq.n	80055e4 <UART_SetConfig+0x210>
 80055b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055b8:	d817      	bhi.n	80055ea <UART_SetConfig+0x216>
 80055ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055be:	d00b      	beq.n	80055d8 <UART_SetConfig+0x204>
 80055c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c4:	d811      	bhi.n	80055ea <UART_SetConfig+0x216>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <UART_SetConfig+0x1fe>
 80055ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ce:	d006      	beq.n	80055de <UART_SetConfig+0x20a>
 80055d0:	e00b      	b.n	80055ea <UART_SetConfig+0x216>
 80055d2:	2300      	movs	r3, #0
 80055d4:	77fb      	strb	r3, [r7, #31]
 80055d6:	e0a1      	b.n	800571c <UART_SetConfig+0x348>
 80055d8:	2302      	movs	r3, #2
 80055da:	77fb      	strb	r3, [r7, #31]
 80055dc:	e09e      	b.n	800571c <UART_SetConfig+0x348>
 80055de:	2304      	movs	r3, #4
 80055e0:	77fb      	strb	r3, [r7, #31]
 80055e2:	e09b      	b.n	800571c <UART_SetConfig+0x348>
 80055e4:	2308      	movs	r3, #8
 80055e6:	77fb      	strb	r3, [r7, #31]
 80055e8:	e098      	b.n	800571c <UART_SetConfig+0x348>
 80055ea:	2310      	movs	r3, #16
 80055ec:	77fb      	strb	r3, [r7, #31]
 80055ee:	e095      	b.n	800571c <UART_SetConfig+0x348>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a2f      	ldr	r2, [pc, #188]	; (80056b4 <UART_SetConfig+0x2e0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d125      	bne.n	8005646 <UART_SetConfig+0x272>
 80055fa:	4b29      	ldr	r3, [pc, #164]	; (80056a0 <UART_SetConfig+0x2cc>)
 80055fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005600:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005608:	d017      	beq.n	800563a <UART_SetConfig+0x266>
 800560a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800560e:	d817      	bhi.n	8005640 <UART_SetConfig+0x26c>
 8005610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005614:	d00b      	beq.n	800562e <UART_SetConfig+0x25a>
 8005616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800561a:	d811      	bhi.n	8005640 <UART_SetConfig+0x26c>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <UART_SetConfig+0x254>
 8005620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005624:	d006      	beq.n	8005634 <UART_SetConfig+0x260>
 8005626:	e00b      	b.n	8005640 <UART_SetConfig+0x26c>
 8005628:	2301      	movs	r3, #1
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e076      	b.n	800571c <UART_SetConfig+0x348>
 800562e:	2302      	movs	r3, #2
 8005630:	77fb      	strb	r3, [r7, #31]
 8005632:	e073      	b.n	800571c <UART_SetConfig+0x348>
 8005634:	2304      	movs	r3, #4
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e070      	b.n	800571c <UART_SetConfig+0x348>
 800563a:	2308      	movs	r3, #8
 800563c:	77fb      	strb	r3, [r7, #31]
 800563e:	e06d      	b.n	800571c <UART_SetConfig+0x348>
 8005640:	2310      	movs	r3, #16
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e06a      	b.n	800571c <UART_SetConfig+0x348>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1b      	ldr	r2, [pc, #108]	; (80056b8 <UART_SetConfig+0x2e4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d138      	bne.n	80056c2 <UART_SetConfig+0x2ee>
 8005650:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <UART_SetConfig+0x2cc>)
 8005652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005656:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800565a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800565e:	d017      	beq.n	8005690 <UART_SetConfig+0x2bc>
 8005660:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005664:	d82a      	bhi.n	80056bc <UART_SetConfig+0x2e8>
 8005666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800566a:	d00b      	beq.n	8005684 <UART_SetConfig+0x2b0>
 800566c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005670:	d824      	bhi.n	80056bc <UART_SetConfig+0x2e8>
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <UART_SetConfig+0x2aa>
 8005676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567a:	d006      	beq.n	800568a <UART_SetConfig+0x2b6>
 800567c:	e01e      	b.n	80056bc <UART_SetConfig+0x2e8>
 800567e:	2300      	movs	r3, #0
 8005680:	77fb      	strb	r3, [r7, #31]
 8005682:	e04b      	b.n	800571c <UART_SetConfig+0x348>
 8005684:	2302      	movs	r3, #2
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	e048      	b.n	800571c <UART_SetConfig+0x348>
 800568a:	2304      	movs	r3, #4
 800568c:	77fb      	strb	r3, [r7, #31]
 800568e:	e045      	b.n	800571c <UART_SetConfig+0x348>
 8005690:	2308      	movs	r3, #8
 8005692:	77fb      	strb	r3, [r7, #31]
 8005694:	e042      	b.n	800571c <UART_SetConfig+0x348>
 8005696:	bf00      	nop
 8005698:	efff69f3 	.word	0xefff69f3
 800569c:	40011000 	.word	0x40011000
 80056a0:	40023800 	.word	0x40023800
 80056a4:	40004400 	.word	0x40004400
 80056a8:	40004800 	.word	0x40004800
 80056ac:	40004c00 	.word	0x40004c00
 80056b0:	40005000 	.word	0x40005000
 80056b4:	40011400 	.word	0x40011400
 80056b8:	40007800 	.word	0x40007800
 80056bc:	2310      	movs	r3, #16
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e02c      	b.n	800571c <UART_SetConfig+0x348>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a72      	ldr	r2, [pc, #456]	; (8005890 <UART_SetConfig+0x4bc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d125      	bne.n	8005718 <UART_SetConfig+0x344>
 80056cc:	4b71      	ldr	r3, [pc, #452]	; (8005894 <UART_SetConfig+0x4c0>)
 80056ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056da:	d017      	beq.n	800570c <UART_SetConfig+0x338>
 80056dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056e0:	d817      	bhi.n	8005712 <UART_SetConfig+0x33e>
 80056e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e6:	d00b      	beq.n	8005700 <UART_SetConfig+0x32c>
 80056e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ec:	d811      	bhi.n	8005712 <UART_SetConfig+0x33e>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <UART_SetConfig+0x326>
 80056f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f6:	d006      	beq.n	8005706 <UART_SetConfig+0x332>
 80056f8:	e00b      	b.n	8005712 <UART_SetConfig+0x33e>
 80056fa:	2300      	movs	r3, #0
 80056fc:	77fb      	strb	r3, [r7, #31]
 80056fe:	e00d      	b.n	800571c <UART_SetConfig+0x348>
 8005700:	2302      	movs	r3, #2
 8005702:	77fb      	strb	r3, [r7, #31]
 8005704:	e00a      	b.n	800571c <UART_SetConfig+0x348>
 8005706:	2304      	movs	r3, #4
 8005708:	77fb      	strb	r3, [r7, #31]
 800570a:	e007      	b.n	800571c <UART_SetConfig+0x348>
 800570c:	2308      	movs	r3, #8
 800570e:	77fb      	strb	r3, [r7, #31]
 8005710:	e004      	b.n	800571c <UART_SetConfig+0x348>
 8005712:	2310      	movs	r3, #16
 8005714:	77fb      	strb	r3, [r7, #31]
 8005716:	e001      	b.n	800571c <UART_SetConfig+0x348>
 8005718:	2310      	movs	r3, #16
 800571a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005724:	d15b      	bne.n	80057de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005726:	7ffb      	ldrb	r3, [r7, #31]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d828      	bhi.n	800577e <UART_SetConfig+0x3aa>
 800572c:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <UART_SetConfig+0x360>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005759 	.word	0x08005759
 8005738:	08005761 	.word	0x08005761
 800573c:	08005769 	.word	0x08005769
 8005740:	0800577f 	.word	0x0800577f
 8005744:	0800576f 	.word	0x0800576f
 8005748:	0800577f 	.word	0x0800577f
 800574c:	0800577f 	.word	0x0800577f
 8005750:	0800577f 	.word	0x0800577f
 8005754:	08005777 	.word	0x08005777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005758:	f7fd ffa8 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 800575c:	61b8      	str	r0, [r7, #24]
        break;
 800575e:	e013      	b.n	8005788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005760:	f7fd ffb8 	bl	80036d4 <HAL_RCC_GetPCLK2Freq>
 8005764:	61b8      	str	r0, [r7, #24]
        break;
 8005766:	e00f      	b.n	8005788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005768:	4b4b      	ldr	r3, [pc, #300]	; (8005898 <UART_SetConfig+0x4c4>)
 800576a:	61bb      	str	r3, [r7, #24]
        break;
 800576c:	e00c      	b.n	8005788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800576e:	f7fd fe8b 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 8005772:	61b8      	str	r0, [r7, #24]
        break;
 8005774:	e008      	b.n	8005788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800577a:	61bb      	str	r3, [r7, #24]
        break;
 800577c:	e004      	b.n	8005788 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	77bb      	strb	r3, [r7, #30]
        break;
 8005786:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d074      	beq.n	8005878 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	005a      	lsls	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	085b      	lsrs	r3, r3, #1
 8005798:	441a      	add	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b0f      	cmp	r3, #15
 80057a8:	d916      	bls.n	80057d8 <UART_SetConfig+0x404>
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b0:	d212      	bcs.n	80057d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f023 030f 	bic.w	r3, r3, #15
 80057ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	89fb      	ldrh	r3, [r7, #14]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	89fa      	ldrh	r2, [r7, #14]
 80057d4:	60da      	str	r2, [r3, #12]
 80057d6:	e04f      	b.n	8005878 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	77bb      	strb	r3, [r7, #30]
 80057dc:	e04c      	b.n	8005878 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057de:	7ffb      	ldrb	r3, [r7, #31]
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d828      	bhi.n	8005836 <UART_SetConfig+0x462>
 80057e4:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <UART_SetConfig+0x418>)
 80057e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ea:	bf00      	nop
 80057ec:	08005811 	.word	0x08005811
 80057f0:	08005819 	.word	0x08005819
 80057f4:	08005821 	.word	0x08005821
 80057f8:	08005837 	.word	0x08005837
 80057fc:	08005827 	.word	0x08005827
 8005800:	08005837 	.word	0x08005837
 8005804:	08005837 	.word	0x08005837
 8005808:	08005837 	.word	0x08005837
 800580c:	0800582f 	.word	0x0800582f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005810:	f7fd ff4c 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8005814:	61b8      	str	r0, [r7, #24]
        break;
 8005816:	e013      	b.n	8005840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005818:	f7fd ff5c 	bl	80036d4 <HAL_RCC_GetPCLK2Freq>
 800581c:	61b8      	str	r0, [r7, #24]
        break;
 800581e:	e00f      	b.n	8005840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005820:	4b1d      	ldr	r3, [pc, #116]	; (8005898 <UART_SetConfig+0x4c4>)
 8005822:	61bb      	str	r3, [r7, #24]
        break;
 8005824:	e00c      	b.n	8005840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005826:	f7fd fe2f 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 800582a:	61b8      	str	r0, [r7, #24]
        break;
 800582c:	e008      	b.n	8005840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800582e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005832:	61bb      	str	r3, [r7, #24]
        break;
 8005834:	e004      	b.n	8005840 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	77bb      	strb	r3, [r7, #30]
        break;
 800583e:	bf00      	nop
    }

    if (pclk != 0U)
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d018      	beq.n	8005878 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	085a      	lsrs	r2, r3, #1
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	441a      	add	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	fbb2 f3f3 	udiv	r3, r2, r3
 8005858:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2b0f      	cmp	r3, #15
 800585e:	d909      	bls.n	8005874 <UART_SetConfig+0x4a0>
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005866:	d205      	bcs.n	8005874 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	b29a      	uxth	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60da      	str	r2, [r3, #12]
 8005872:	e001      	b.n	8005878 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005884:	7fbb      	ldrb	r3, [r7, #30]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3720      	adds	r7, #32
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40007c00 	.word	0x40007c00
 8005894:	40023800 	.word	0x40023800
 8005898:	00f42400 	.word	0x00f42400

0800589c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01a      	beq.n	80059b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800599a:	d10a      	bne.n	80059b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	605a      	str	r2, [r3, #4]
  }
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059f0:	f7fb fdd0 	bl	8001594 <HAL_GetTick>
 80059f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d10e      	bne.n	8005a22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f831 	bl	8005a7a <UART_WaitOnFlagUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e027      	b.n	8005a72 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d10e      	bne.n	8005a4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f81b 	bl	8005a7a <UART_WaitOnFlagUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e011      	b.n	8005a72 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b09c      	sub	sp, #112	; 0x70
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	603b      	str	r3, [r7, #0]
 8005a86:	4613      	mov	r3, r2
 8005a88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a8a:	e0a7      	b.n	8005bdc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a92:	f000 80a3 	beq.w	8005bdc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a96:	f7fb fd7d 	bl	8001594 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d302      	bcc.n	8005aac <UART_WaitOnFlagUntilTimeout+0x32>
 8005aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d13f      	bne.n	8005b2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005abc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ac0:	667b      	str	r3, [r7, #100]	; 0x64
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005acc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ad0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e6      	bne.n	8005aac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	663b      	str	r3, [r7, #96]	; 0x60
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3308      	adds	r3, #8
 8005afc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005afe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e5      	bne.n	8005ade <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e068      	b.n	8005bfe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d050      	beq.n	8005bdc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b48:	d148      	bne.n	8005bdc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b72:	637b      	str	r3, [r7, #52]	; 0x34
 8005b74:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e6      	bne.n	8005b54 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	613b      	str	r3, [r7, #16]
   return(result);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ba6:	623a      	str	r2, [r7, #32]
 8005ba8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	69f9      	ldr	r1, [r7, #28]
 8005bac:	6a3a      	ldr	r2, [r7, #32]
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e010      	b.n	8005bfe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	69da      	ldr	r2, [r3, #28]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	4013      	ands	r3, r2
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	bf0c      	ite	eq
 8005bec:	2301      	moveq	r3, #1
 8005bee:	2300      	movne	r3, #0
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	f43f af48 	beq.w	8005a8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3770      	adds	r7, #112	; 0x70
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b096      	sub	sp, #88	; 0x58
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	4613      	mov	r3, r2
 8005c14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	88fa      	ldrh	r2, [r7, #6]
 8005c20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2222      	movs	r2, #34	; 0x22
 8005c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d028      	beq.n	8005c8e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c40:	4a3e      	ldr	r2, [pc, #248]	; (8005d3c <UART_Start_Receive_DMA+0x134>)
 8005c42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c48:	4a3d      	ldr	r2, [pc, #244]	; (8005d40 <UART_Start_Receive_DMA+0x138>)
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c50:	4a3c      	ldr	r2, [pc, #240]	; (8005d44 <UART_Start_Receive_DMA+0x13c>)
 8005c52:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c58:	2200      	movs	r2, #0
 8005c5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3324      	adds	r3, #36	; 0x24
 8005c66:	4619      	mov	r1, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	88fb      	ldrh	r3, [r7, #6]
 8005c70:	f7fb fe80 	bl	8001974 <HAL_DMA_Start_IT>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d009      	beq.n	8005c8e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2210      	movs	r2, #16
 8005c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e051      	b.n	8005d32 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d018      	beq.n	8005cc8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005caa:	657b      	str	r3, [r7, #84]	; 0x54
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cb6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e6      	bne.n	8005c96 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3308      	adds	r3, #8
 8005cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	653b      	str	r3, [r7, #80]	; 0x50
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ce8:	637a      	str	r2, [r7, #52]	; 0x34
 8005cea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e5      	bne.n	8005cc8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3308      	adds	r3, #8
 8005d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d1c:	623a      	str	r2, [r7, #32]
 8005d1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	69f9      	ldr	r1, [r7, #28]
 8005d22:	6a3a      	ldr	r2, [r7, #32]
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e5      	bne.n	8005cfc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3758      	adds	r7, #88	; 0x58
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	08005e5d 	.word	0x08005e5d
 8005d40:	08005f85 	.word	0x08005f85
 8005d44:	08005fc3 	.word	0x08005fc3

08005d48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b089      	sub	sp, #36	; 0x24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d64:	61fb      	str	r3, [r7, #28]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	61bb      	str	r3, [r7, #24]
 8005d70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	6979      	ldr	r1, [r7, #20]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e6      	bne.n	8005d50 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005d88:	bf00      	nop
 8005d8a:	3724      	adds	r7, #36	; 0x24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b095      	sub	sp, #84	; 0x54
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005db0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dba:	643b      	str	r3, [r7, #64]	; 0x40
 8005dbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005dc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dc2:	e841 2300 	strex	r3, r2, [r1]
 8005dc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1e6      	bne.n	8005d9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	f023 0301 	bic.w	r3, r3, #1
 8005de4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3308      	adds	r3, #8
 8005dec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005df0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e5      	bne.n	8005dce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d118      	bne.n	8005e3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f023 0310 	bic.w	r3, r3, #16
 8005e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e28:	61bb      	str	r3, [r7, #24]
 8005e2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	6979      	ldr	r1, [r7, #20]
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	613b      	str	r3, [r7, #16]
   return(result);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e6      	bne.n	8005e0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e50:	bf00      	nop
 8005e52:	3754      	adds	r7, #84	; 0x54
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b09c      	sub	sp, #112	; 0x70
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e68:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e72:	d071      	beq.n	8005f58 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8005e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e90:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ea0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e6      	bne.n	8005e7c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec0:	f023 0301 	bic.w	r3, r3, #1
 8005ec4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3308      	adds	r3, #8
 8005ecc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ece:	647a      	str	r2, [r7, #68]	; 0x44
 8005ed0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e5      	bne.n	8005eae <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8005efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3308      	adds	r3, #8
 8005f00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f02:	633a      	str	r2, [r7, #48]	; 0x30
 8005f04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e5      	bne.n	8005ee2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d118      	bne.n	8005f58 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	e853 3f00 	ldrex	r3, [r3]
 8005f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0310 	bic.w	r3, r3, #16
 8005f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	461a      	mov	r2, r3
 8005f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f44:	61fb      	str	r3, [r7, #28]
 8005f46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f48:	69b9      	ldr	r1, [r7, #24]
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	e841 2300 	strex	r3, r2, [r1]
 8005f50:	617b      	str	r3, [r7, #20]
   return(result);
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e6      	bne.n	8005f26 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d107      	bne.n	8005f76 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f70:	f7ff fa1a 	bl	80053a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f74:	e002      	b.n	8005f7c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8005f76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f78:	f7fa fb08 	bl	800058c <HAL_UART_RxCpltCallback>
}
 8005f7c:	bf00      	nop
 8005f7e:	3770      	adds	r7, #112	; 0x70
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d109      	bne.n	8005fb4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	4619      	mov	r1, r3
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7ff f9fb 	bl	80053a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fb2:	e002      	b.n	8005fba <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7ff f9e3 	bl	8005380 <HAL_UART_RxHalfCpltCallback>
}
 8005fba:	bf00      	nop
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b086      	sub	sp, #24
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fd4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fdc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe8:	2b80      	cmp	r3, #128	; 0x80
 8005fea:	d109      	bne.n	8006000 <UART_DMAError+0x3e>
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	2b21      	cmp	r3, #33	; 0x21
 8005ff0:	d106      	bne.n	8006000 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005ffa:	6978      	ldr	r0, [r7, #20]
 8005ffc:	f7ff fea4 	bl	8005d48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600a:	2b40      	cmp	r3, #64	; 0x40
 800600c:	d109      	bne.n	8006022 <UART_DMAError+0x60>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b22      	cmp	r3, #34	; 0x22
 8006012:	d106      	bne.n	8006022 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2200      	movs	r2, #0
 8006018:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800601c:	6978      	ldr	r0, [r7, #20]
 800601e:	f7ff feb9 	bl	8005d94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006028:	f043 0210 	orr.w	r2, r3, #16
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006032:	6978      	ldr	r0, [r7, #20]
 8006034:	f7ff f9ae 	bl	8005394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006038:	bf00      	nop
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f7ff f998 	bl	8005394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006064:	bf00      	nop
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	60bb      	str	r3, [r7, #8]
   return(result);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	61bb      	str	r3, [r7, #24]
 8006094:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6979      	ldr	r1, [r7, #20]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	613b      	str	r3, [r7, #16]
   return(result);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e6      	bne.n	8006074 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff f95a 	bl	800536c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060b8:	bf00      	nop
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060c0:	b084      	sub	sp, #16
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	f107 001c 	add.w	r0, r7, #28
 80060ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d120      	bne.n	800611a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	4b20      	ldr	r3, [pc, #128]	; (800616c <USB_CoreInit+0xac>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d105      	bne.n	800610e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa96 	bl	8006640 <USB_CoreReset>
 8006114:	4603      	mov	r3, r0
 8006116:	73fb      	strb	r3, [r7, #15]
 8006118:	e010      	b.n	800613c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fa8a 	bl	8006640 <USB_CoreReset>
 800612c:	4603      	mov	r3, r0
 800612e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	2b01      	cmp	r3, #1
 8006140:	d10b      	bne.n	800615a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f043 0206 	orr.w	r2, r3, #6
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f043 0220 	orr.w	r2, r3, #32
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006166:	b004      	add	sp, #16
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	ffbdffbf 	.word	0xffbdffbf

08006170 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f023 0201 	bic.w	r2, r3, #1
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	460b      	mov	r3, r1
 800619c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061ae:	78fb      	ldrb	r3, [r7, #3]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d115      	bne.n	80061e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061c0:	2001      	movs	r0, #1
 80061c2:	f7fb f9f3 	bl	80015ac <HAL_Delay>
      ms++;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3301      	adds	r3, #1
 80061ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fa29 	bl	8006624 <USB_GetMode>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d01e      	beq.n	8006216 <USB_SetCurrentMode+0x84>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b31      	cmp	r3, #49	; 0x31
 80061dc:	d9f0      	bls.n	80061c0 <USB_SetCurrentMode+0x2e>
 80061de:	e01a      	b.n	8006216 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d115      	bne.n	8006212 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061f2:	2001      	movs	r0, #1
 80061f4:	f7fb f9da 	bl	80015ac <HAL_Delay>
      ms++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3301      	adds	r3, #1
 80061fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fa10 	bl	8006624 <USB_GetMode>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d005      	beq.n	8006216 <USB_SetCurrentMode+0x84>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b31      	cmp	r3, #49	; 0x31
 800620e:	d9f0      	bls.n	80061f2 <USB_SetCurrentMode+0x60>
 8006210:	e001      	b.n	8006216 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e005      	b.n	8006222 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b32      	cmp	r3, #50	; 0x32
 800621a:	d101      	bne.n	8006220 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800622c:	b084      	sub	sp, #16
 800622e:	b580      	push	{r7, lr}
 8006230:	b086      	sub	sp, #24
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800623a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006246:	2300      	movs	r3, #0
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	e009      	b.n	8006260 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	3340      	adds	r3, #64	; 0x40
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	2200      	movs	r2, #0
 8006258:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	3301      	adds	r3, #1
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2b0e      	cmp	r3, #14
 8006264:	d9f2      	bls.n	800624c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006268:	2b00      	cmp	r3, #0
 800626a:	d11c      	bne.n	80062a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627a:	f043 0302 	orr.w	r3, r3, #2
 800627e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	e005      	b.n	80062b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062b8:	461a      	mov	r2, r3
 80062ba:	2300      	movs	r3, #0
 80062bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c4:	4619      	mov	r1, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062cc:	461a      	mov	r2, r3
 80062ce:	680b      	ldr	r3, [r1, #0]
 80062d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d10c      	bne.n	80062f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d104      	bne.n	80062e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062de:	2100      	movs	r1, #0
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f965 	bl	80065b0 <USB_SetDevSpeed>
 80062e6:	e008      	b.n	80062fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062e8:	2101      	movs	r1, #1
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f960 	bl	80065b0 <USB_SetDevSpeed>
 80062f0:	e003      	b.n	80062fa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062f2:	2103      	movs	r1, #3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f95b 	bl	80065b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062fa:	2110      	movs	r1, #16
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f8f3 	bl	80064e8 <USB_FlushTxFifo>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f91f 	bl	8006550 <USB_FlushRxFifo>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006322:	461a      	mov	r2, r3
 8006324:	2300      	movs	r3, #0
 8006326:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632e:	461a      	mov	r2, r3
 8006330:	2300      	movs	r3, #0
 8006332:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633a:	461a      	mov	r2, r3
 800633c:	2300      	movs	r3, #0
 800633e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006340:	2300      	movs	r3, #0
 8006342:	613b      	str	r3, [r7, #16]
 8006344:	e043      	b.n	80063ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800635c:	d118      	bne.n	8006390 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10a      	bne.n	800637a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	461a      	mov	r2, r3
 8006372:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	e013      	b.n	80063a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006386:	461a      	mov	r2, r3
 8006388:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e008      	b.n	80063a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639c:	461a      	mov	r2, r3
 800639e:	2300      	movs	r3, #0
 80063a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ae:	461a      	mov	r2, r3
 80063b0:	2300      	movs	r3, #0
 80063b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c0:	461a      	mov	r2, r3
 80063c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	3301      	adds	r3, #1
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d3b7      	bcc.n	8006346 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063d6:	2300      	movs	r3, #0
 80063d8:	613b      	str	r3, [r7, #16]
 80063da:	e043      	b.n	8006464 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063f2:	d118      	bne.n	8006426 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006406:	461a      	mov	r2, r3
 8006408:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	e013      	b.n	8006438 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641c:	461a      	mov	r2, r3
 800641e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	e008      	b.n	8006438 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006432:	461a      	mov	r2, r3
 8006434:	2300      	movs	r3, #0
 8006436:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006444:	461a      	mov	r2, r3
 8006446:	2300      	movs	r3, #0
 8006448:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006456:	461a      	mov	r2, r3
 8006458:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800645c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	3301      	adds	r3, #1
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	429a      	cmp	r2, r3
 800646a:	d3b7      	bcc.n	80063dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800647a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800647e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800648c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	2b00      	cmp	r3, #0
 8006492:	d105      	bne.n	80064a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	f043 0210 	orr.w	r2, r3, #16
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699a      	ldr	r2, [r3, #24]
 80064a4:	4b0e      	ldr	r3, [pc, #56]	; (80064e0 <USB_DevInit+0x2b4>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f043 0208 	orr.w	r2, r3, #8
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d105      	bne.n	80064d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699a      	ldr	r2, [r3, #24]
 80064c8:	4b06      	ldr	r3, [pc, #24]	; (80064e4 <USB_DevInit+0x2b8>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064dc:	b004      	add	sp, #16
 80064de:	4770      	bx	lr
 80064e0:	803c3800 	.word	0x803c3800
 80064e4:	40000004 	.word	0x40000004

080064e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3301      	adds	r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4a13      	ldr	r2, [pc, #76]	; (800654c <USB_FlushTxFifo+0x64>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d901      	bls.n	8006508 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e01b      	b.n	8006540 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	daf2      	bge.n	80064f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	019b      	lsls	r3, r3, #6
 8006518:	f043 0220 	orr.w	r2, r3, #32
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3301      	adds	r3, #1
 8006524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a08      	ldr	r2, [pc, #32]	; (800654c <USB_FlushTxFifo+0x64>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d901      	bls.n	8006532 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e006      	b.n	8006540 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b20      	cmp	r3, #32
 800653c:	d0f0      	beq.n	8006520 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	00030d40 	.word	0x00030d40

08006550 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4a11      	ldr	r2, [pc, #68]	; (80065ac <USB_FlushRxFifo+0x5c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d901      	bls.n	800656e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e018      	b.n	80065a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	daf2      	bge.n	800655c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2210      	movs	r2, #16
 800657e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3301      	adds	r3, #1
 8006584:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4a08      	ldr	r2, [pc, #32]	; (80065ac <USB_FlushRxFifo+0x5c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d901      	bls.n	8006592 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e006      	b.n	80065a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f003 0310 	and.w	r3, r3, #16
 800659a:	2b10      	cmp	r3, #16
 800659c:	d0f0      	beq.n	8006580 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	00030d40 	.word	0x00030d40

080065b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	68f9      	ldr	r1, [r7, #12]
 80065cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065d0:	4313      	orrs	r3, r2
 80065d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b085      	sub	sp, #20
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065fc:	f023 0303 	bic.w	r3, r3, #3
 8006600:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006610:	f043 0302 	orr.w	r3, r3, #2
 8006614:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	f003 0301 	and.w	r3, r3, #1
}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3301      	adds	r3, #1
 8006650:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4a13      	ldr	r2, [pc, #76]	; (80066a4 <USB_CoreReset+0x64>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d901      	bls.n	800665e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e01b      	b.n	8006696 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	daf2      	bge.n	800664c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f043 0201 	orr.w	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4a09      	ldr	r2, [pc, #36]	; (80066a4 <USB_CoreReset+0x64>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d901      	bls.n	8006688 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e006      	b.n	8006696 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b01      	cmp	r3, #1
 8006692:	d0f0      	beq.n	8006676 <USB_CoreReset+0x36>

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	00030d40 	.word	0x00030d40

080066a8 <__libc_init_array>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	4d0d      	ldr	r5, [pc, #52]	; (80066e0 <__libc_init_array+0x38>)
 80066ac:	4c0d      	ldr	r4, [pc, #52]	; (80066e4 <__libc_init_array+0x3c>)
 80066ae:	1b64      	subs	r4, r4, r5
 80066b0:	10a4      	asrs	r4, r4, #2
 80066b2:	2600      	movs	r6, #0
 80066b4:	42a6      	cmp	r6, r4
 80066b6:	d109      	bne.n	80066cc <__libc_init_array+0x24>
 80066b8:	4d0b      	ldr	r5, [pc, #44]	; (80066e8 <__libc_init_array+0x40>)
 80066ba:	4c0c      	ldr	r4, [pc, #48]	; (80066ec <__libc_init_array+0x44>)
 80066bc:	f000 f82e 	bl	800671c <_init>
 80066c0:	1b64      	subs	r4, r4, r5
 80066c2:	10a4      	asrs	r4, r4, #2
 80066c4:	2600      	movs	r6, #0
 80066c6:	42a6      	cmp	r6, r4
 80066c8:	d105      	bne.n	80066d6 <__libc_init_array+0x2e>
 80066ca:	bd70      	pop	{r4, r5, r6, pc}
 80066cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d0:	4798      	blx	r3
 80066d2:	3601      	adds	r6, #1
 80066d4:	e7ee      	b.n	80066b4 <__libc_init_array+0xc>
 80066d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066da:	4798      	blx	r3
 80066dc:	3601      	adds	r6, #1
 80066de:	e7f2      	b.n	80066c6 <__libc_init_array+0x1e>
 80066e0:	0800685c 	.word	0x0800685c
 80066e4:	0800685c 	.word	0x0800685c
 80066e8:	0800685c 	.word	0x0800685c
 80066ec:	08006860 	.word	0x08006860

080066f0 <memcpy>:
 80066f0:	440a      	add	r2, r1
 80066f2:	4291      	cmp	r1, r2
 80066f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066f8:	d100      	bne.n	80066fc <memcpy+0xc>
 80066fa:	4770      	bx	lr
 80066fc:	b510      	push	{r4, lr}
 80066fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006706:	4291      	cmp	r1, r2
 8006708:	d1f9      	bne.n	80066fe <memcpy+0xe>
 800670a:	bd10      	pop	{r4, pc}

0800670c <memset>:
 800670c:	4402      	add	r2, r0
 800670e:	4603      	mov	r3, r0
 8006710:	4293      	cmp	r3, r2
 8006712:	d100      	bne.n	8006716 <memset+0xa>
 8006714:	4770      	bx	lr
 8006716:	f803 1b01 	strb.w	r1, [r3], #1
 800671a:	e7f9      	b.n	8006710 <memset+0x4>

0800671c <_init>:
 800671c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671e:	bf00      	nop
 8006720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006722:	bc08      	pop	{r3}
 8006724:	469e      	mov	lr, r3
 8006726:	4770      	bx	lr

08006728 <_fini>:
 8006728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672a:	bf00      	nop
 800672c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672e:	bc08      	pop	{r3}
 8006730:	469e      	mov	lr, r3
 8006732:	4770      	bx	lr
